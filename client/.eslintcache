[{"/Users/scottbillings/Desktop/D&D/client/src/index.js":"1","/Users/scottbillings/Desktop/D&D/client/src/App.js":"2","/Users/scottbillings/Desktop/D&D/client/src/Pages/Join.js":"3","/Users/scottbillings/Desktop/D&D/client/src/Pages/Play.js":"4","/Users/scottbillings/Desktop/D&D/client/src/Components/InputBar.js":"5","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceRoll.js":"6","/Users/scottbillings/Desktop/D&D/client/src/Components/Character.js":"7","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceLoad.js":"8","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Messaging.js":"9","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/DropDowns.js":"10","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageInput.js":"11","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageDisplay.js":"12","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Message.js":"13","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideBar.js":"14","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideDrawer.js":"15","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/BackDrop.js":"16","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/MapDrawer.js":"17","/Users/scottbillings/Desktop/D&D/client/src/Components/Maps/WorldMap.js":"18","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/PostDrawer.js":"19","/Users/scottbillings/Desktop/D&D/client/src/Components/Post/Post.js":"20","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPCDisplay.js":"21","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPC.js":"22","/Users/scottbillings/Desktop/D&D/client/src/Components/Dice/Dice.js":"23","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/Combat.js":"24","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/ErrorModal.js":"25","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Modal.js":"26","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Help.js":"27","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/CustomDropdown.js":"28","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MessageDropDown.js":"29","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/MonsterCreator.js":"30","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterDropDown.js":"31","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterInputs.js":"32"},{"size":167,"mtime":1617306038458,"results":"33","hashOfConfig":"34"},{"size":340,"mtime":1611171411057,"results":"35","hashOfConfig":"34"},{"size":1732,"mtime":1617902782359,"results":"36","hashOfConfig":"34"},{"size":11696,"mtime":1617929612390,"results":"37","hashOfConfig":"34"},{"size":4342,"mtime":1617922963845,"results":"38","hashOfConfig":"34"},{"size":2877,"mtime":1617306038434,"results":"39","hashOfConfig":"34"},{"size":3177,"mtime":1617912672406,"results":"40","hashOfConfig":"34"},{"size":322,"mtime":1617306038433,"results":"41","hashOfConfig":"34"},{"size":1177,"mtime":1617929929853,"results":"42","hashOfConfig":"34"},{"size":2597,"mtime":1617331446548,"results":"43","hashOfConfig":"34"},{"size":613,"mtime":1617306038437,"results":"44","hashOfConfig":"34"},{"size":652,"mtime":1617306038437,"results":"45","hashOfConfig":"34"},{"size":431,"mtime":1617306038436,"results":"46","hashOfConfig":"34"},{"size":7638,"mtime":1617909847352,"results":"47","hashOfConfig":"34"},{"size":559,"mtime":1617306038441,"results":"48","hashOfConfig":"34"},{"size":326,"mtime":1617306038439,"results":"49","hashOfConfig":"34"},{"size":552,"mtime":1617306038440,"results":"50","hashOfConfig":"34"},{"size":597,"mtime":1617306038435,"results":"51","hashOfConfig":"34"},{"size":552,"mtime":1617306038440,"results":"52","hashOfConfig":"34"},{"size":2365,"mtime":1617306038441,"results":"53","hashOfConfig":"34"},{"size":1576,"mtime":1617909888221,"results":"54","hashOfConfig":"34"},{"size":2091,"mtime":1617912262939,"results":"55","hashOfConfig":"34"},{"size":491,"mtime":1617306038433,"results":"56","hashOfConfig":"34"},{"size":4306,"mtime":1618930039927,"results":"57","hashOfConfig":"34"},{"size":613,"mtime":1617908505045,"results":"58","hashOfConfig":"34"},{"size":1112,"mtime":1617906473580,"results":"59","hashOfConfig":"34"},{"size":895,"mtime":1617732512383,"results":"60","hashOfConfig":"34"},{"size":2448,"mtime":1618958374954,"results":"61","hashOfConfig":"34"},{"size":2490,"mtime":1617929914601,"results":"62","hashOfConfig":"34"},{"size":2222,"mtime":1619028374569,"results":"63","hashOfConfig":"34"},{"size":2622,"mtime":1618966956068,"results":"64","hashOfConfig":"34"},{"size":1117,"mtime":1619028391384,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"feu3fp",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/scottbillings/Desktop/D&D/client/src/index.js",[],["140","141"],"/Users/scottbillings/Desktop/D&D/client/src/App.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Pages/Join.js",["142"],"import React, { useState } from  'react';\nimport { Link } from 'react-router-dom';\nimport ErrorModal from '../Components/Modal/ErrorModal'\nimport './Join.css';\nimport CustomDropdown from '../Components/Reusable/CustomDropdown';\n\n\nconst Join = () => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [playerType, setPlayerType] = useState([{id:1, value: 'PLAYER'}])\n\n  const items = [\n    {\n      id: 1,\n      value: 'PLAYER'\n    },\n    {\n      id: 2,\n      value: 'DM'\n    }\n  ]\n\n\n\n  const showState = () => {\n    console.log(playerType[0].value);\n  }\n  \n  \n\n  return (\n    <div className=\"joinOuterContainer\">\n\n      <div className='joinInnerContainer'>\n        <h1 className=\"heading\">JOIN THE ADVENTURE</h1>\n        <div className=\"joinInputBox\"><input placeholder=\"Name\" className=\"joinInput\" type=\"text\" value={name} onChange={(event) => setName(event.target.value)}></input></div>\n        <div className=\"joinInputBox\"><input placeholder=\"Room\" className=\"joinInput\" type=\"text\" value={room} onChange={(event) => setRoom(event.target.value)}></input></div>\n        <CustomDropdown items={items} title={'YOU ARE...'} headingStyle=\"frontPage spaceTop\" setSingleState={setPlayerType} singleState={playerType}/>\n        <Link style={{textDecoration: \"none\", fontFamily: \"'Niconne', cursive\"}} onClick={e => (!name || !room) ? e.preventDefault() : null} to={`/play?name=${name}&room=${room}&role=${playerType[0].value}`}>\n          <button className=\"signInButton\" type=\"submit\">JOIN PARTY</button>\n        </Link>\n        <button onClick={showState}>Herrooo</button>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Join;\n\n// to={`/play?name=${name}&room=${room}$role=${playerType[0].value}`}","/Users/scottbillings/Desktop/D&D/client/src/Pages/Play.js",["143","144","145","146","147","148"],"import React, {useState, useEffect} from  'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Play.css';\nimport Character from '../Components/Character';\nimport SideBar from '../Components/Navigation/SideBar';\nimport Modal from '../Components/Modal/Modal';\nimport ErrorModal from '../Components/Modal/ErrorModal';\nimport Help from '../Components/Modal/Help';\nimport {Howl, Howler} from 'howler';\nimport NotificationSound from '../Resources/juntos-607.mp3';\nimport NewPlayerSound from '../Resources/attention-seeker-480.mp3';\n\n\nlet socket;\nconst Play\n = ({ location }) => {\n   const [showModal, setShowModal] = useState(false);\n   const [name, setName] = useState('');\n   const [room, setRoom] = useState('');\n   const [role, setRole] = useState('')\n   const [users, setUsers] = useState(null);\n   const [message, setMessage] = useState('');\n   const [messages, setMessages] = useState(localStorage.getItem('messages') ? JSON.parse(localStorage.getItem('messages')): [])\n  //  const [playerData, setPlayerData] = useState()\n   const [partyData, setPartyData] = useState(localStorage.getItem('partyStats') ? JSON.parse(localStorage.getItem('partyStats')) : {})\n   const [partyRolls, setPartyRolls] = useState({})\n   const [stats, setStats] = useState(localStorage.getItem('stats') ? JSON.parse(localStorage.getItem('stats')) : {\n    user: '',\n    hp: '0',\n    ac: '0',\n    melee: '0',\n    ranged: '0',\n    str: '0',\n    dex: '0',\n    con: '0',\n    int: '0',\n    wis: '0',\n    cha: '0',\n    dice: 0,\n    portrait: \"\"\n  })\n  const [map, setMap] = useState(localStorage.getItem('map') ? JSON.parse(localStorage.getItem('map')) : \"\")\n  const [npcNotes, setNPCNotes] = useState(localStorage.getItem('npcNotes') ? JSON.parse(localStorage.getItem('npcNotes')):{})\n  const [recipients, setRecipients] = useState([])\n  const [npcArray, setNPCArray] = useState(localStorage.getItem('npcArray') ? JSON.parse(localStorage.getItem('npcArray')) : []);\n  const [notePost, setNotePost] = useState(\"\")\n  const [unreadMessages, setUnreadMessages] = useState(0)\n\n  const [unseenNPC, setUnseenNPC] = useState(0)\n  const [unseenMap, setUnseenMap] = useState(0)\n\n  const [userYPosition, setUserYPosition] = useState(0)\n  const [userXPosition, setUserXPosition] = useState(0)\n  const [partyPosition, setPartyPosition] = useState(localStorage.getItem('partyPosition') ? JSON.parse(localStorage.getItem('partyPosition')) :{})\n  const [error, setError] = useState(null)\n\n  const audioClips = [\n    {sound: NotificationSound, label: \"notification\"},\n    {sound: NewPlayerSound, label: \"newPlayer\"}\n  ]\n  \n\n  const ENDPOINT = 'localhost:5000'\n\n  \n  \n  \n  \n  useEffect(() => {\n    const { name, room, role } = queryString.parse(location.search);\n    \n    socket = io(ENDPOINT)\n    setRole(role)\n    setName(name.toLowerCase());\n    setRoom(room);\n\n    if (role === 'PLAYER') {setStats({...stats, user: name})}\n    if (role === 'DM') (setStats({...stats, user: name, portrait: \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F5%2F51%2FBKH-kitten-blue.jpg&f=1&nofb=1\"}))\n    setRecipients([...recipients, name])\n    //the set recipients here makes it so that the sender is always able to view his own messages, and doesn't have to click his own name checkbox in messages\n    \n    // set initial player state here?\n    //we have to grab the player role from the url and then put it into this emit which will send to users.js in back end. <<<<<<<<<<\n    socket.emit('join', { name, room, role },  (error) => {\n      if(error) {\n        setError(error);\n      } \n    });\n\n  }, [ENDPOINT, location.search]);\n    \n\n  \n  \n  // useEffect(() => {\n  //   socket.on(\"roomData\", ({ users }) => {\n  //     setUsers(users);\n  //     // notificationAudio(audioClips[1].sound)\n  //   });\n  // }, [])// this could be an issue if it keeps playing any time there is a refresh. \n  // // possible have chime every time the number of users increases, and if it decreases have a different sound. \n  \n  \n  \n  \n  useEffect(() => {\n    socket.on('stats', (stats) => {\n        setPartyData({...partyData, [stats.user]: stats})\n      });\n\n      socket.on(\"roomData\", ({ users }) => {\n        setUsers(users);\n      });\n    }, [partyData]);\n     \n\n\n\n\n\n    useEffect(() => {\n      socket.on('number', (number) => {\n        setPartyRolls({...partyRolls, [number.user]: number})\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n      })\n    }, [partyRolls])\n\n\n\n    \n    useEffect(() => {\n      socket.on('map', (map) => {\n        setMap(map)\n        setUnseenMap(unseenMap + 1)\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n      })\n    }, [map])\n\n    \n    // under construction \n    useEffect(() => {\n      socket.on('npc', (npc) => {\n        setNPCArray([...npcArray, npc])\n        setNPCNotes({...npcNotes, [npc.name]:[]})\n        setUnseenNPC(unseenNPC + 1)\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n      })\n    }, [npcArray, npcNotes])\n\n    // this needs to be done like messages so there is an object for each one\n\n\n    useEffect(() => {\n      socket.on('deleteNPC', (deletedNPC) => {\n        setNPCArray((prevNPCArray) => prevNPCArray.filter((nonPlayer) => nonPlayer.name !== deletedNPC.name))\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n    })\n  }, [npcArray])\n\n//ooooooooooooooooooffffffffffffff\n  useEffect(() => {\n    socket.on('sendNote', (sendNote) => {\n      console.log(sendNote);\n      console.log(npcNotes[sendNote.name].push(sendNote.note))\n      // setNPCNotes({...npcNotes, [note.name]: npcNotes[note.name].push(note.note)})\n      window.localStorage.setItem(\"npcNotes\", JSON.stringify(npcNotes))\n     \n\n      // setNPCNotes({...npcNotes, [note.name]: newObj})\n      \n    })\n    socket.on('roomData', ({ users }) => {\n      setUsers(users);\n  })\n},[npcNotes])\n      \n// end the horror \n\n\nuseEffect(() => {\n  socket.on('playerMessage',  (playerMessage) => {\n    setMessages([...messages, playerMessage ])\n    if (playerMessage.recipients.includes(name) && playerMessage.name !== name ){\n      setUnreadMessages(unreadMessages + 1)\n      notificationAudio(audioClips[0].sound)\n    }\n    console.log(\"use effect triggered\")\n  })\n  socket.on('roomData', ({ users }) => {\n    setUsers(users);\n})\n}, [messages, unreadMessages, name])\n\n\n\nuseEffect(() => {\n  socket.on('sendPlayerPosition', (sendPlayerPosition) => {\n    setPartyPosition({...partyPosition, [sendPlayerPosition.name]:{position: sendPlayerPosition.position, icon: sendPlayerPosition.icon}})\n  })\n  socket.on('roomData', ({ users}) => {\n    setUsers(users)\n  })\n}, [partyPosition])\n\n\n\n\n    useEffect(() => {\n      window.localStorage.setItem('stats', JSON.stringify(stats))\n      window.localStorage.setItem('partyStats', JSON.stringify(partyData))\n      window.localStorage.setItem(\"map\", JSON.stringify(map) )\n      window.localStorage.setItem(\"npcArray\", JSON.stringify(npcArray))\n      window.localStorage.setItem(\"npcNotes\", JSON.stringify(npcNotes))\n      window.localStorage.setItem('messages', JSON.stringify(messages))\n      window.localStorage.setItem('partyPosition', JSON.stringify(partyPosition))\n      window.localStorage.setItem('users', JSON.stringify(users))\n    }, [stats, partyData, map, npcArray, npcNotes, messages, partyPosition, users]);\n\n\n\n    const sendPlayerData = (event) => {\n      event.preventDefault();\n      if(stats) {\n        socket.emit('sendPlayerData', stats)\n        console.log(stats)\n      }\n    }\n\n    const sendPlayerRoll = (number) => {\n      if(number) {\n        socket.emit('sendPlayerRoll', number)\n        console.log(number)\n      }\n    }\n    \n  \n    const sendMapData = (map) => {\n      if(map) {\n        socket.emit('sendMapData', map)\n      }\n      console.log(\"send map data was triggered\")\n    } \n    \n    \n    const sendNPCData = (npc) => {\n      if(npc) {\n        socket.emit('sendNPCData', npc)\n      }\n      console.log({npc})\n    }\n\n\n\n    const deleteNPCData = (npc) => {\n      if(npc) {\n        socket.emit('deleteNPCData', npc)\n      }\n      console.log({npc})\n    }\n\n    //possibly failing since sending note into function instead of event and note being a state in the play component\n    const sendNPCNote = (name, note) => {\n      if(note && name) {\n        socket.emit('sendNPCNote', name, note)\n      }\n      console.log(note)\n    }\n\n\n    const sendPlayerMessage = (event) => {\n      event.preventDefault()\n      if(message && recipients !== [] && stats.portrait) {\n        let icon = stats.portrait\n        socket.emit('sendPlayerMessage', message, recipients, name, icon)\n        console.log(`message triggered ${message}`)\n      }\n    }\n\n\n    const sendPlayerPosition = (position) => {\n      if (userXPosition !== 0 && userYPosition !== 0 && stats.portrait) {\n        let icon = stats.portrait\n        socket.emit('sendPlayerPosition', position, name, icon)\n        console.log('triggered send player position')\n      }\n    }\n      \n    \n    const notificationAudio = (src) => {\n      const sound = new Howl({\n        src\n      })\n      sound.play();\n    }\n\n\n  const clearError = () => {\n    setError(null);\n  }\n  \n  const closeModal = () => {\n    setShowModal(false)\n  }\n  \n  const showSomething = () => {\n    setShowModal(!showModal);\n    \n  }\n  \n  \n  const displayTest = () => {\n    console.log(messages)\n  }\n  \n  \n  \n  \n  \n    return (\n    <div className=\"outerContainer\">\n      <ErrorModal error={error} onClear={clearError} />\n    <Modal \n      show={showModal === true} \n      children={<Help />}\n      onCancel={closeModal}\n      header={<p>SELECT A TOPIC FOR EXPLANATION</p>}\n      />\n      {!error && <SideBar \n      setRecipients={setRecipients}\n      recipients={recipients}\n      messages={messages}\n      users={users}\n      sendMapData={sendMapData}\n      sendNPCData={sendNPCData}\n      map={map}\n      npcArray={npcArray}\n      deleteNPCData={deleteNPCData}\n      sendNPCNote={sendNPCNote}\n      sendPlayerRoll={sendPlayerRoll} \n      setStats={setStats} \n      sendPlayerData={sendPlayerData}\n      name={name} \n      stats={stats}\n      setMessage={setMessage}\n      sendPlayerMessage={sendPlayerMessage}\n      message={message}\n      unreadMessages={unreadMessages}\n      setUnreadMessages={setUnreadMessages}\n\n      unseenMap={unseenMap}\n      setUnseenMap={setUnseenMap}\n      unseenNPC={unseenNPC}\n      setUnseenNPC={setUnseenNPC}\n\n      setUserXPosition={setUserXPosition}\n      setUserYPosition={setUserYPosition}\n      userXPosition={userXPosition}\n      userYPosition={userYPosition}\n      sendPlayerPosition={sendPlayerPosition}\n      partyPosition={partyPosition}\n      notePost={notePost}\n      setNotePost={setNotePost}\n      npcNotes={npcNotes}\n      showSomething={showSomething}\n      showModal={showModal}\n      role={role}\n\n      />}\n      \n    <button onClick={displayTest}>Click to check map state</button>\n      \n\n      <div className=\"playersContainer\">\n      {users && users.filter(user => user.role !== \"dm\").map((user) => <Character key={user.id} name = {user.name}  individualRole={partyRolls[user.name]} partyData={partyData} stats={stats}/>)}\n      {/* {users && users.map((user) => <Character key={user.id} name = {user.name}  individualRole={partyRolls[user.name]} partyData={partyData} stats={stats}/>)} */}\n      </div>\n\n      {/* <div className='controlBox'>\n\n        <InputBar\n        // playerData={playerData}\n        name={name} \n        sendPlayerData={sendPlayerData}\n        sendPlayerRoll={sendPlayerRoll}\n        setStats={setStats}\n        stats={stats}\n        />\n      </div> */}\n    </div>\n  )\n}\n\nexport default Play","/Users/scottbillings/Desktop/D&D/client/src/Components/InputBar.js",["149","150","151","152","153"],"import React, { useState, useEffect } from 'react';\nimport Dice from '../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png';\nimport DiceRoll from './DiceRoll';\nimport './InputBar.css';\n\nconst InputBar = ({stats, setStats, name, sendPlayerData, sendPlayerRoll }) => {\n\n  const [playerIconPreview, setPlayerIconPreview] = useState(\"\")\n  const [correctName, setCorrectName] = useState(\"\")\n  \n  useEffect(() => {\n    setCorrectName(newName())\n  })\n  // const  setDiceRoll = async (roll) => {\n  //   await setStats({...stats, dice: roll})\n  //   // sendPlayerData()\n  // }\n  const newName = () => {\n    const caps = name.charAt(0).toUpperCase() + name.slice(1);\n    return caps;\n    \n  }\n  \n\n\n  return (\n  <form className=\"inputBarContainer\" onSubmit={sendPlayerData}>\n\n    <div className=\"charBox3\">\n      <img src={stats.portrait} alt=\"ADD URL FOR CHARACTER PORTRAIT BELOW\"></img>\n\n    </div>\n\n    <div className=\"charBox1\">\n\n    <div className=\"input-character-name\">\n      <h1>{correctName}</h1>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Hit Points</p>\n    <input \n    className=\"charInput\"\n    value={stats.hp}\n    onChange={(event) => setStats({...stats, hp: event.target.value})}\n    // value={props.playerData}\n    // onChange={(event) => props.setPlayerData(event.target.value)}\n    // onKeyPress={event => event.key === 'Enter' ? props.sendPlayerData(event) : null}\n    >\n    </input>\n    </div>\n\n\n    <div className=\"charInputDiv\">\n      <p>Armor Class</p>\n      <input className=\"charInput\"\n        value={stats.ac}\n        onChange={(event) => setStats({...stats, ac: event.target.value})}\n      >\n      </input>\n      {/* <button onClick={() => console.log(stats)}>ShowState</button> */}\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Melee Bonus</p>\n      <input className=\"charInput\"\n      value={stats.melee}\n      onChange={(event) => setStats({...stats, melee: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Ranged Bonus</p>\n      <input className=\"charInput\"\n      value={stats.ranged}\n      onChange={(event) => setStats({...stats, ranged: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Portrait URL</p>\n      <input className=\"charInput\"\n      value={stats.portrait}\n      onChange={(event) => setStats({...stats, portrait: event.target.value})}>\n        \n      </input>\n    </div>\n\n    {/* </div>\n\n  <div className=\"charBox2\"> */}\n\n    <div className=\"charInputDiv\">\n      <p>Strength Save</p>\n      <input className=\"charInput\"\n      value={stats.str}\n      onChange={(event) => setStats({...stats, str: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Dexterity Save</p>\n      <input className=\"charInput\"\n      value={stats.dex}\n      onChange={(event) => setStats({...stats, dex: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Constitution Save</p>\n      <input className=\"charInput\"\n      value={stats.con}\n      onChange={(event) => setStats({...stats, con: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Intelligence save</p>\n      <input className=\"charInput\"\n      value={stats.int}\n      onChange={(event) => setStats({...stats, int: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Wisdom Save</p>\n      <input className=\"charInput\"\n      value={stats.wis}\n      onChange={(event) => setStats({...stats, wis: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Charisma Save</p>\n      <input className=\"charInput\"\n      value={stats.cha}\n      onChange={(event) => setStats({...stats, cha: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"submit-stats-container\">\n      <button className=\"submit-stats\" type=\"button\" onClick={sendPlayerData} >Update Stats</button>\n    </div>\n  </div>\n\n\n    {/* <div className=\"charBox4\">\n      <img id=\"diceImage\" src={Dice} alt=\"dice\"></img>\n\n    </div>\n\n\n    <DiceRoll sendPlayerRoll={sendPlayerRoll} setStats={setStats} sendPlayerData={sendPlayerData}/>\n  <button className='sendButton' type='submit'>Set Stats</button> */}\n  </form>\n\n  \n  )\n  \n}\n\nexport default InputBar","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceRoll.js",["154"],"import React, { useState } from 'react';\nimport './DiceRoll.css';\nimport diceSound from  '../Resources/diceRoll.mp3';\nimport {Howl, Howler} from 'howler';\n\nconst DiceRoll = ({sendPlayerRoll}) => {\n  const [result, setResult] = useState(null)\n  const [type, setType] = useState(4)\n  const [number, setNumber] = useState(1)\n\n  const audioClips = [\n    {sound: diceSound, label: \"dice\"}\n  ]\n\n\n  const diceOptions = [\n    {\n      label: \"D4\",\n      value: 4\n    },\n    {\n      label: \"D6\",\n      value: 6\n    },\n    {\n      label: \"D8\",\n      value: 8\n    },\n    {\n      label: \"D10\",\n      value: 10\n    },\n    {\n      label: \"D12\",\n      value: 12\n    },\n    {\n      label: \"D20\",\n      value: 20\n    },\n\n  ]\n\n  const diceCount = [\n    {\n      label: 1,\n      value: 1\n    },\n    {\n      label: 2,\n      value: 2\n    },\n    {\n      label: 3,\n      value: 3\n    },\n    {\n      label: 4,\n      value: 4\n    },\n    {\n      label: 5,\n      value: 5\n    },\n    {\n      label: 6,\n      value: 6\n    },\n  ]\n\n  const handleType = (event) => {\n    setType(event.target.value)\n  }\n\n  const handleNumber = (event) => {\n    setNumber(event.target.value)\n  }\n\n  const diceMaths = () => {\n    let diceVal = 0\n    if (number > 1) {\n      for (let i = 1;  i <= number; i++) {\n        diceVal = diceVal + Math.floor(Math.random() * type) + 1\n        \n      }\n    } else {\n      diceVal = Math.floor(Math.random() * type) + 1\n    }\n    setResult(diceVal);\n    sendPlayerRoll(diceVal)\n    diceFunc(audioClips[0].sound)\n    // console.log(diceVal);\n  }\n\n  const diceFunc = (src) => {\n    const sound = new Howl({\n      src\n    })\n    sound.play();\n  }\n\n  const clearRoll = () => {\n    setResult(null);\n    setType(4);\n    setNumber(1);\n  }\n\n  return (\n    <div className=\"diceRollContainer\">\n      <div className=\"diceSelectContainer\">\n      <div className=\"custom-select\">\n        <select className=\"diceSelect\" onChange={handleType} value={type}>\n          {diceOptions.map((option) => (\n            <option key={option.value} value={option.value}>{option.label}</option>\n          ))}\n        </select>\n        <span className=\"custom-arrow\" />\n      </div>\n\n      <div className=\"custom-select\">\n        <select className=\"diceSelect\" onChange={handleNumber} value={number}>\n          {diceCount.map((count) => (\n            <option key={count.value }value={count.value}>{count.label}</option>\n          ))}\n        </select>\n        <span className=\"custom-arrow\" />\n      </div>\n      </div>\n      <div className=\"diceButtonContainer\">\n        <button type=\"button\" onClick={clearRoll}>CLEAR</button>\n        <button type=\"button\" onClick={diceMaths}>ROLL DICE</button>\n      </div>\n      <div className=\"diceResultContainer\">\n            <div className=\"diceResultBackground\">\n          {result && <h1>{result}</h1>}\n            </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default DiceRoll;","/Users/scottbillings/Desktop/D&D/client/src/Components/Character.js",["155"],"import React, {useState, useEffect} from 'react';\nimport './Character.css';\nimport DiceLoad from './DiceLoad';\nimport {GiIciclesAura} from 'react-icons/gi';\nimport {MdLiveHelp} from 'react-icons/md'\n\nconst Character = ({partyRolls, partyData, name, individualRole}) => {\n  const [playerStats, setPlayerStats] = useState(null)\n  const [isLoading, setIsLoading] = useState(false);\n  const [correctName, setCorrectName] = useState(\"\")\n\n  // let user = props.name\n\n  // let playerStats = props.partyData[user] || null;\n  // let playerRoll = props.partyRolls[user]\n\n  const funFunction = async () => {\n     setIsLoading(true)\n     setTimeout(() => {setIsLoading(false)}, 1000)\n\n  }\n\n  useEffect(() => {\n  \n    setPlayerStats(partyData[name])\n    setCorrectName(newName())\n  },[partyData, name])\n\n  useEffect(() => {\n    funFunction()\n  }, [individualRole])\n\n  \nconst newName = () => {\n  const caps = name.charAt(0).toUpperCase() + name.slice(1);\n  return caps;\n  \n}\n\n\n  return (\n    <>\n    {!playerStats && <div className='char-Container'>\n      <div className=\"empty-character\">\n        <h1 className=\"update-char-name\">{correctName}</h1>\n        <h1 className=\"update-stats-h1\">UPDATE YOUR STATS!</h1>\n        <div className=\"stats-directions\">\n          <p>CLICK THE CHARACTER ICON ON RIGHT SIDE NAVIGATION TOOL</p>\n          <GiIciclesAura style={{height: \"3rem\", width: \"auto\"}}/>\n          <p>IF YOU NEED HELP WITH ANY OTHER PART OF THE USER INTERFACE, CLICK THE TUTORIAL ICON</p>\n          <MdLiveHelp style={{height: \"3rem\", width: \"auto\"}} />\n        </div>\n\n      </div>\n      </div>}\n\n\n    {playerStats &&  <div className='char-Container'>\n      {/* <button onClick={() => console.log(playerStats)}>CharacterInfo</button> */}\n      <div className=\"player-container-1\">\n        <h1>{correctName}</h1>\n        <div className=\"i-hate-you\">\n          <img alt=\"\" src={playerStats.text.portrait}></img>\n        </div>\n        </div>\n\n\n\n\n\n      <div className=\"player-container-2\">\n        <div className='player-stat-holder'>\n          <div className='stats-1'>\n\n            <p>HP {playerStats.text.hp}</p>  \n            <p>AC {playerStats.text.ac}</p>\n            <p>Melee+ {playerStats.text.melee}</p>\n            <p>Ranged+ {playerStats.text.ranged}</p>\n            <p>P.P. +</p>\n            <p>P.I. +</p>\n          </div>\n          <div className='stats-2'> \n            <p>Str+ {playerStats.text.str}</p>\n            <p>Dex+ {playerStats.text.dex}</p>\n            <p>Con+ {playerStats.text.con}</p>\n            <p>Wis+ {playerStats.text.wis}</p>\n            <p>Int+ {playerStats.text.int}</p>\n            <p>Con+ {playerStats.text.cha}</p>\n          </div>\n        </div>\n        <div className='player-dice-display'>\n          <h1 className=\"player-display-roll-text\">Recent Dice Roll</h1>\n          {!isLoading && <div className='player-dice-box'>\n             {individualRole === undefined ? <p>0</p> : <p>{individualRole.number}</p>}\n            {/* <button onClick={() => console.log(playerRoll.number)}>Click</button> */}\n          </div>}\n          {isLoading && <DiceLoad/>}\n        </div>\n\n      \n      </div>\n    </div>}\n    </>\n  )\n}\n\nexport default Character;","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceLoad.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Messaging.js",["156","157","158"],"import React, {useState, useEffect} from 'react';\nimport './Messaging.css';\nimport MessageDisplay from './MessageDisplay';\nimport DropDowns from './DropDowns';\nimport MessageInput from './MessageInput';\nimport MessageDropdown from '../Reusable/MessageDropDown';\n\n\n\n\nconst Messaging = ({setMessage, sendPlayerMessage, message, setRecipients, users, recipients, messages, name, unreadMessages, setUnreadMessages}) => {\n\n  useEffect(() => {\n    return () => {\n      setRecipients([name])\n    }\n  },[setRecipients, name])\n\n  useEffect(() => {\n    setUnreadMessages(0)\n  }, [])\n\n  //this clears the recipients when they close the drawer (unmount) otherwise it will cause all kinds of issues \n  \n\n\n  return(\n    <div className=\"messaging-container\">\n    <DropDowns users={users} setRecipients={setRecipients} recipients={recipients} name={name}/>\n    {/* <MessageDropdown items={users} name={name} singleState={recipients} setSingleState={setRecipients} title=\"CHOOSE RECIPIENTS\"/> */}\n    <MessageDisplay messages={messages} name={name}/>\n    <MessageInput setMessage={setMessage} sendPlayerMessage={sendPlayerMessage} message={message}/>\n\n    </div>\n  )\n}\n\nexport default Messaging","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/DropDowns.js",["159"],"import React, {useState, useEffect} from 'react';\nimport './DropDowns.css';\n\nconst DropDowns = ({users, setRecipients, recipients, name}) => {\nconst [drop1Extended, setDrop1Extended] = useState(false)\nconst [drop2Extended, setDrop2Extended] = useState(false)\nconst [userArray, setUserArray] = useState()\n\n\nuseEffect(() => {\n  setUserArray(users.filter(user => user.name !== name))\n},[name, users])\n\n\n  const showDropDown = () => {\n    if (drop1Extended) {\n      setDrop1Extended(false)\n    }\n    if (!drop1Extended) {\n      setDrop1Extended(true)\n    }\n  }\n\n  const showDropDown2 = () => {\n    if (drop2Extended) {\n      setDrop2Extended(false)\n    }\n    if (!drop2Extended) {\n      setDrop2Extended(true)\n    }\n  }\n\n  // const retract = () => {\n  //   if (drop2Extended) {\n  //     setDrop2Extended(false)\n  //   }\n  // }\n\n  const handleCheckboxChange = (event) => {\n    let newArray = [...recipients, event.target.id];\n    if (recipients.includes(event.target.id)) {\n      newArray = newArray.filter(user => user !== event.target.id)\n    }\n    setRecipients(newArray)\n    console.log(recipients)\n  }\n\n  return (\n    <div className=\"dropdown-container\" onMouseLeave={() => setDrop2Extended(false)}>\n      <form>\n        {/* <div className='multi-select'>\n          <div className=\"select-box\" onClick={showDropDown}>\n          <select>\n            <options>Select A Languages</options>\n          </select>\n            <div className=\"over-select\"><p>Select A Language</p></div>\n          </div>\n          <div id={drop1Extended ? \"check-boxes-expanded\" : \"check-boxes\"}>\n            <label for=\"language-one\"><input type=\"checkbox\" id=\"language-one\"/>First Checkbox</label>\n            <label for=\"language-two\"><input type=\"checkbox\" id=\"language-two\"/>Second Checkbox</label>\n            <label for=\"language-three\"><input type=\"checkbox\" id=\"language-three\"/>Third Checkbox</label>\n\n          </div>\n\n\n        </div> */}\n\n\n        <div className='multi-select2'>\n          <div className=\"select-box\" onClick={showDropDown2}>\n          <select>\n            <options>Select Players</options>\n          </select>\n            <div className=\"over-select\"><p>SELECT RECIPIENTS</p></div>\n          </div>\n          <div id={drop2Extended ? \"check-boxes-expanded\" : \"check-boxes\"} >\n          {users && userArray && userArray.map((user) => <label key={user.id} for={user.name}><input type=\"checkbox\" id={user.name} onChange={handleCheckboxChange}/>{user.name}</label>)}\n\n          \n          \n            \n\n          </div>\n\n\n        </div>\n      </form>\n\n    </div>\n  )\n}\n\nexport default DropDowns;","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageInput.js",["160","161"],"import React, {useState, useEffect} from 'react'\nimport './MessageInput.css';\n\nconst MessageInput = ({message, setMessage, sendPlayerMessage}) => {\n  return(\n    <form className=\"messaging-form\">\n    <textarea\n      className=\"messaging-input\"\n      type=\"\"\n      placeholder=\"Type a message...\"\n      value={message}\n      onChange={({ target: { value } }) => setMessage(value)}\n      onKeyPress={event => event.key === 'Enter' ? sendPlayerMessage(event) : null}\n    />\n    <button className=\"messaging-sendButton\" onClick={e => sendPlayerMessage(e)}>Send</button>\n  </form>\n  )\n}\n\nexport default MessageInput;\n\n","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageDisplay.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Message.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideBar.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/BackDrop.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/MapDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Maps/WorldMap.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/PostDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Post/Post.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPCDisplay.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPC.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Dice/Dice.js",["162"],"import React, {useState} from 'react'\nimport './Dice.css';\nimport DiceRoll from '../DiceRoll'\nimport DicePic from '../../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png'\n\n\nconst Dice = ({sendPlayerRoll}) => {\n  return (\n    <div className=\"dice-container\">\n      <div className=\"dice-picture-container\">\n        <img src={DicePic} alt=\"\"></img>\n      </div>\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\n\n    </div>\n  )\n}\n\nexport default Dice;","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/Combat.js",["163","164","165"],"/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/ErrorModal.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Modal.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Help.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/CustomDropdown.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MessageDropDown.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/MonsterCreator.js",["166","167"],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterDropDown.js",["168","169"],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterInputs.js",["170"],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":18},{"ruleId":"175","severity":1,"message":"179","line":10,"column":15,"nodeType":"177","messageId":"178","endLine":10,"endColumn":21},{"ruleId":"175","severity":1,"message":"180","line":20,"column":11,"nodeType":"177","messageId":"178","endLine":20,"endColumn":15},{"ruleId":"181","severity":1,"message":"182","line":91,"column":6,"nodeType":"183","endLine":91,"endColumn":33,"suggestions":"184"},{"ruleId":"181","severity":1,"message":"185","line":142,"column":8,"nodeType":"183","endLine":142,"endColumn":13,"suggestions":"186"},{"ruleId":"181","severity":1,"message":"187","line":155,"column":8,"nodeType":"183","endLine":155,"endColumn":28,"suggestions":"188"},{"ruleId":"181","severity":1,"message":"189","line":201,"column":4,"nodeType":"183","endLine":201,"endColumn":36,"suggestions":"190"},{"ruleId":"175","severity":1,"message":"191","line":2,"column":8,"nodeType":"177","messageId":"178","endLine":2,"endColumn":12},{"ruleId":"175","severity":1,"message":"192","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":16},{"ruleId":"175","severity":1,"message":"193","line":8,"column":10,"nodeType":"177","messageId":"178","endLine":8,"endColumn":27},{"ruleId":"175","severity":1,"message":"194","line":8,"column":29,"nodeType":"177","messageId":"178","endLine":8,"endColumn":49},{"ruleId":"181","severity":1,"message":"195","line":11,"column":3,"nodeType":"177","endLine":11,"endColumn":12,"suggestions":"196"},{"ruleId":"175","severity":1,"message":"179","line":4,"column":15,"nodeType":"177","messageId":"178","endLine":4,"endColumn":21},{"ruleId":"181","severity":1,"message":"197","line":27,"column":5,"nodeType":"183","endLine":27,"endColumn":22,"suggestions":"198"},{"ruleId":"175","severity":1,"message":"199","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":24},{"ruleId":"175","severity":1,"message":"200","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":23},{"ruleId":"181","severity":1,"message":"201","line":21,"column":6,"nodeType":"183","endLine":21,"endColumn":8,"suggestions":"202"},{"ruleId":"175","severity":1,"message":"203","line":15,"column":9,"nodeType":"177","messageId":"178","endLine":15,"endColumn":21},{"ruleId":"175","severity":1,"message":"199","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":24},{"ruleId":"175","severity":1,"message":"204","line":1,"column":26,"nodeType":"177","messageId":"178","endLine":1,"endColumn":35},{"ruleId":"175","severity":1,"message":"199","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":24},{"ruleId":"175","severity":1,"message":"199","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":35},{"ruleId":"175","severity":1,"message":"205","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":29},{"ruleId":"181","severity":1,"message":"206","line":35,"column":4,"nodeType":"183","endLine":35,"endColumn":11,"suggestions":"207"},{"ruleId":"175","severity":1,"message":"204","line":1,"column":26,"nodeType":"177","messageId":"178","endLine":1,"endColumn":35},{"ruleId":"175","severity":1,"message":"208","line":1,"column":37,"nodeType":"177","messageId":"178","endLine":1,"endColumn":43},{"ruleId":"175","severity":1,"message":"209","line":12,"column":12,"nodeType":"177","messageId":"178","endLine":12,"endColumn":25},{"ruleId":"175","severity":1,"message":"210","line":33,"column":12,"nodeType":"177","messageId":"178","endLine":33,"endColumn":29},{"ruleId":"175","severity":1,"message":"204","line":1,"column":26,"nodeType":"177","messageId":"178","endLine":1,"endColumn":35},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-unused-vars","'ErrorModal' is defined but never used.","Identifier","unusedVar","'Howler' is defined but never used.","'room' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recipients' and 'stats'. Either include them or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.","ArrayExpression",["213"],"React Hook useEffect has a missing dependency: 'unseenMap'. Either include it or remove the dependency array. You can also do a functional update 'setUnseenMap(u => ...)' if you only need 'unseenMap' in the 'setUnseenMap' call.",["214"],"React Hook useEffect has a missing dependency: 'unseenNPC'. Either include it or remove the dependency array. You can also do a functional update 'setUnseenNPC(u => ...)' if you only need 'unseenNPC' in the 'setUnseenNPC' call.",["215"],"React Hook useEffect has a missing dependency: 'audioClips'. Either include it or remove the dependency array.",["216"],"'Dice' is defined but never used.","'DiceRoll' is defined but never used.","'playerIconPreview' is assigned a value but never used.","'setPlayerIconPreview' is assigned a value but never used.","React Hook useEffect contains a call to 'setCorrectName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [newName] as a second argument to the useEffect Hook.",["217"],"React Hook useEffect has a missing dependency: 'newName'. Either include it or remove the dependency array.",["218"],"'useState' is defined but never used.","'MessageDropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'setUnreadMessages'. Either include it or remove the dependency array. If 'setUnreadMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["219"],"'showDropDown' is assigned a value but never used.","'useEffect' is defined but never used.","'GiConsoleController' is defined but never used.","React Hook useEffect has missing dependencies: 'setUserXPosition' and 'setUserYPosition'. Either include them or remove the dependency array. If 'setUserXPosition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["220"],"'useRef' is defined but never used.","'handleOnClick' is defined but never used.","'isItemInSelection' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [ENDPOINT, location.search, recipients, stats]",{"range":"237","text":"238"},"Update the dependencies array to be: [map, unseenMap]",{"range":"239","text":"240"},"Update the dependencies array to be: [npcArray, npcNotes, unseenNPC]",{"range":"241","text":"242"},"Update the dependencies array to be: [messages, unreadMessages, name, audioClips]",{"range":"243","text":"244"},"Add dependencies array: [newName]",{"range":"245","text":"246"},"Update the dependencies array to be: [partyData, name, newName]",{"range":"247","text":"248"},"Update the dependencies array to be: [setUnreadMessages]",{"range":"249","text":"250"},"Update the dependencies array to be: [setUserXPosition, setUserYPosition, users]",{"range":"251","text":"252"},[3640,3667],"[ENDPOINT, location.search, recipients, stats]",[4738,4743],"[map, unseenMap]",[5055,5075],"[npcArray, npcNotes, unseenNPC]",[6385,6417],"[messages, unreadMessages, name, audioClips]",[483,483],", [newName]",[771,788],"[partyData, name, newName]",[569,571],"[setUnreadMessages]",[1469,1476],"[setUserXPosition, setUserYPosition, users]"]
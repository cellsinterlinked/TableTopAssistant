[{"/Users/scottbillings/Desktop/D&D/client/src/index.js":"1","/Users/scottbillings/Desktop/D&D/client/src/App.js":"2","/Users/scottbillings/Desktop/D&D/client/src/Pages/Join.js":"3","/Users/scottbillings/Desktop/D&D/client/src/Pages/Play.js":"4","/Users/scottbillings/Desktop/D&D/client/src/Components/InputBar.js":"5","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceRoll.js":"6","/Users/scottbillings/Desktop/D&D/client/src/Components/Character.js":"7","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceLoad.js":"8","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Messaging.js":"9","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/DropDowns.js":"10","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageInput.js":"11","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageDisplay.js":"12","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Message.js":"13","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideBar.js":"14","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideDrawer.js":"15","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/BackDrop.js":"16","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/MapDrawer.js":"17","/Users/scottbillings/Desktop/D&D/client/src/Components/Maps/WorldMap.js":"18","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/PostDrawer.js":"19","/Users/scottbillings/Desktop/D&D/client/src/Components/Post/Post.js":"20","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPCDisplay.js":"21","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPC.js":"22","/Users/scottbillings/Desktop/D&D/client/src/Components/Dice/Dice.js":"23","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/Combat.js":"24"},{"size":167,"mtime":1614189758936,"results":"25","hashOfConfig":"26"},{"size":340,"mtime":1611171411057,"results":"27","hashOfConfig":"26"},{"size":1038,"mtime":1611256587628,"results":"28","hashOfConfig":"26"},{"size":8910,"mtime":1616886249337,"results":"29","hashOfConfig":"26"},{"size":4083,"mtime":1615520410151,"results":"30","hashOfConfig":"26"},{"size":2877,"mtime":1617208795032,"results":"31","hashOfConfig":"26"},{"size":2525,"mtime":1616110146956,"results":"32","hashOfConfig":"26"},{"size":322,"mtime":1613015528856,"results":"33","hashOfConfig":"26"},{"size":979,"mtime":1616637640596,"results":"34","hashOfConfig":"26"},{"size":2452,"mtime":1616637860557,"results":"35","hashOfConfig":"26"},{"size":613,"mtime":1616636714799,"results":"36","hashOfConfig":"26"},{"size":652,"mtime":1616636737773,"results":"37","hashOfConfig":"26"},{"size":431,"mtime":1616096331334,"results":"38","hashOfConfig":"26"},{"size":7175,"mtime":1617214202845,"results":"39","hashOfConfig":"26"},{"size":559,"mtime":1614796504864,"results":"40","hashOfConfig":"26"},{"size":326,"mtime":1614273214532,"results":"41","hashOfConfig":"26"},{"size":552,"mtime":1615523471184,"results":"42","hashOfConfig":"26"},{"size":597,"mtime":1615056897275,"results":"43","hashOfConfig":"26"},{"size":552,"mtime":1614802495558,"results":"44","hashOfConfig":"26"},{"size":2370,"mtime":1617209909881,"results":"45","hashOfConfig":"26"},{"size":1474,"mtime":1616017845987,"results":"46","hashOfConfig":"26"},{"size":2042,"mtime":1617216712090,"results":"47","hashOfConfig":"26"},{"size":491,"mtime":1615490308712,"results":"48","hashOfConfig":"26"},{"size":5663,"mtime":1617208143569,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"feu3fp",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/scottbillings/Desktop/D&D/client/src/index.js",[],["105","106"],"/Users/scottbillings/Desktop/D&D/client/src/App.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Pages/Join.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Pages/Play.js",["107","108"],"import React, {useState, useEffect} from  'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Play.css';\nimport Character from '../Components/Character';\nimport SideBar from '../Components/Navigation/SideBar';\n\n\n\nlet socket;\nconst Play\n = ({ location }) => {\n   const [name, setName] = useState('');\n   const [room, setRoom] = useState('');\n   const [users, setUsers] = useState(null);\n   const [message, setMessage] = useState('');\n   const [messages, setMessages] = useState(localStorage.getItem('messages') ? JSON.parse(localStorage.getItem('messages')): [])\n  //  const [playerData, setPlayerData] = useState()\n   const [partyData, setPartyData] = useState(localStorage.getItem('partyStats') ? JSON.parse(localStorage.getItem('partyStats')) : {})\n   const [partyRolls, setPartyRolls] = useState({})\n   const [stats, setStats] = useState(localStorage.getItem('stats') ? JSON.parse(localStorage.getItem('stats')) : {\n    user: '',\n    hp: '0',\n    ac: '0',\n    melee: '0',\n    ranged: '0',\n    str: '0',\n    dex: '0',\n    con: '0',\n    int: '0',\n    wis: '0',\n    cha: '0',\n    dice: 0,\n    portrait: \"\"\n  })\n  const [map, setMap] = useState(localStorage.getItem('map') ? JSON.parse(localStorage.getItem('map')) : null)\n  const [npcNotes, setNPCNotes] = useState(localStorage.getItem('npcNotes') ? JSON.parse(localStorage.getItem('npcNotes')):{})\n  const [recipients, setRecipients] = useState([])\n  const [npcArray, setNPCArray] = useState(localStorage.getItem('npcArray') ? JSON.parse(localStorage.getItem('npcArray')) : []);\n\n  const [unreadMessages, setUnreadMessages] = useState(0)\n  const [userYPosition, setUserYPosition] = useState(0)\n  const [userXPosition, setUserXPosition] = useState(0)\n  const [partyPosition, setPartyPosition] = useState(localStorage.getItem('partyPosition') ? JSON.parse(localStorage.getItem('partyPosition')) :{})\n\n\n  \n\n  const ENDPOINT = 'localhost:5000'\n\n  \n  \n  \n  \n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n    \n    socket = io(ENDPOINT)\n\n    setName(name);\n    setRoom(room);\n    setStats({...stats, user: name})\n    setRecipients([...recipients, name])\n    //the set recipients here makes it so that the sender is always able to view his own messages, and doesn't have to click his own name checkbox in messages\n    \n    // set initial player state here?\n    socket.emit('join', { name, room },  (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n\n  }, [ENDPOINT, location.search]);\n    \n\n  \n  \n  \n  \n  \n  \n  \n  \n  useEffect(() => {\n    socket.on('stats', (stats) => {\n        setPartyData({...partyData, [stats.user]: stats})\n      });\n\n      socket.on(\"roomData\", ({ users }) => {\n        setUsers(users);\n      });\n    }, [partyData]);\n     \n\n\n\n\n\n    useEffect(() => {\n      socket.on('number', (number) => {\n        setPartyRolls({...partyRolls, [number.user]: number})\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n      })\n    }, [partyRolls])\n\n\n\n    \n    useEffect(() => {\n      socket.on('map', (map) => {\n        setMap(map)\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n      })\n    }, [map])\n\n    \n    // under construction \n    useEffect(() => {\n      socket.on('npc', (npc) => {\n        setNPCArray([...npcArray, npc])\n        setNPCNotes({...npcNotes, [npc.name]:[]})\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n      })\n    }, [npcArray, npcNotes])\n\n    // this needs to be done like messages so there is an object for each one\n\n\n    useEffect(() => {\n      socket.on('deleteNPC', (deletedNPC) => {\n        setNPCArray((prevNPCArray) => prevNPCArray.filter((nonPlayer) => nonPlayer.name !== deletedNPC.name))\n      })\n      socket.on('roomData', ({ users }) => {\n        setUsers(users);\n    })\n  }, [npcArray])\n\n//ooooooooooooooooooffffffffffffff\n  useEffect(() => {\n    socket.on('sendNote', (note) => {\n      console.log(note);\n      // setNPCNotes({...npcNotes, [note.name]: npcNotes[note.name].push(note.note)})\n      \n     \n\n      // setNPCNotes({...npcNotes, [note.name]: newObj})\n      \n    })\n    socket.on('roomData', ({ users }) => {\n      setUsers(users);\n  })\n},[npcNotes])\n      \n// end the horror \n\n\nuseEffect(() => {\n  socket.on('playerMessage',  (playerMessage) => {\n    setMessages([...messages, playerMessage ])\n    if (playerMessage.recipients.includes(name) && playerMessage.name !== name ){setUnreadMessages(unreadMessages + 1)}\n    console.log(\"use effect triggered\")\n  })\n  socket.on('roomData', ({ users }) => {\n    setUsers(users);\n})\n}, [messages, unreadMessages, name])\n\n\n\nuseEffect(() => {\n  socket.on('sendPlayerPosition', (sendPlayerPosition) => {\n    setPartyPosition({...partyPosition, [sendPlayerPosition.name]:{position: sendPlayerPosition.position, icon: sendPlayerPosition.icon}})\n  })\n  socket.on('roomData', ({ users}) => {\n    setUsers(users)\n  })\n}, [partyPosition])\n\n\n\n\n    useEffect(() => {\n      window.localStorage.setItem('stats', JSON.stringify(stats))\n      window.localStorage.setItem('partyStats', JSON.stringify(partyData))\n      window.localStorage.setItem(\"map\", JSON.stringify(map) )\n      window.localStorage.setItem(\"npcArray\", JSON.stringify(npcArray))\n      window.localStorage.setItem(\"npcNotes\", JSON.stringify(npcNotes))\n      window.localStorage.setItem('messages', JSON.stringify(messages))\n      window.localStorage.setItem('partyPosition', JSON.stringify(partyPosition))\n      window.localStorage.setItem('users', JSON.stringify(users))\n    }, [stats, partyData, map, npcArray, npcNotes, messages, partyPosition, users]);\n\n\n\n    const sendPlayerData = (event) => {\n      event.preventDefault();\n      if(stats) {\n        socket.emit('sendPlayerData', stats)\n        console.log(stats)\n      }\n    }\n\n    const sendPlayerRoll = (number) => {\n      if(number) {\n        socket.emit('sendPlayerRoll', number)\n        console.log(number)\n      }\n    }\n    \n  \n    const sendMapData = (map) => {\n      if(map) {\n        socket.emit('sendMapData', map)\n      }\n      console.log(\"send map data was triggered\")\n    } \n    \n    \n    const sendNPCData = (npc) => {\n      if(npc) {\n        socket.emit('sendNPCData', npc)\n      }\n      console.log({npc})\n    }\n\n\n\n    const deleteNPCData = (npc) => {\n      if(npc) {\n        socket.emit('deleteNPCData', npc)\n      }\n      console.log({npc})\n    }\n\n    //possibly failing since sending note into function instead of event and note being a state in the play component\n    const sendNPCNote = (note) => {\n      if(note) {\n        socket.emit('sendNPCNote', note)\n      }\n      console.log(note)\n    }\n\n\n    const sendPlayerMessage = (event) => {\n      event.preventDefault()\n      if(message && recipients !== [] && stats.portrait) {\n        let icon = stats.portrait\n        socket.emit('sendPlayerMessage', message, recipients, name, icon)\n        console.log(`message triggered ${message}`)\n      }\n    }\n\n\n    const sendPlayerPosition = (position) => {\n      if (userXPosition !== 0 && userYPosition !== 0 && stats.portrait) {\n        let icon = stats.portrait\n        socket.emit('sendPlayerPosition', position, name, icon)\n        console.log('triggered send player position')\n      }\n    }\n      \n    \n\n\n\n\n  \n  const showSomething = () => {\n    console.log(partyPosition);\n    \n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n    return (\n    <div className=\"outerContainer\">\n      <SideBar \n      setRecipients={setRecipients}\n      recipients={recipients}\n      messages={messages}\n      users={users}\n      sendMapData={sendMapData}\n      sendNPCData={sendNPCData}\n      map={map}\n      npcArray={npcArray}\n      deleteNPCData={deleteNPCData}\n      sendNPCNote={sendNPCNote}\n      sendPlayerRoll={sendPlayerRoll} \n      setStats={setStats} \n      sendPlayerData={sendPlayerData}\n      name={name} \n      stats={stats}\n      setMessage={setMessage}\n      sendPlayerMessage={sendPlayerMessage}\n      message={message}\n      unreadMessages={unreadMessages}\n      setUnreadMessages={setUnreadMessages}\n      setUserXPosition={setUserXPosition}\n      setUserYPosition={setUserYPosition}\n      userXPosition={userXPosition}\n      userYPosition={userYPosition}\n      sendPlayerPosition={sendPlayerPosition}\n      partyPosition={partyPosition}\n\n\n      />\n      \n    <button onClick={showSomething}>Click to check map state</button>\n      \n\n      <div className=\"playersContainer\">\n      {users && users.map((user) => <Character key={user.id} name = {user.name}  individualRole={partyRolls[user.name]} partyData={partyData} stats={stats}/>)}\n      </div>\n\n      {/* <div className='controlBox'>\n\n        <InputBar\n        // playerData={playerData}\n        name={name} \n        sendPlayerData={sendPlayerData}\n        sendPlayerRoll={sendPlayerRoll}\n        setStats={setStats}\n        stats={stats}\n        />\n      </div> */}\n    </div>\n  )\n}\n\nexport default Play","/Users/scottbillings/Desktop/D&D/client/src/Components/InputBar.js",["109","110","111","112"],"import React, { useState } from 'react';\nimport Dice from '../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png';\nimport DiceRoll from './DiceRoll';\nimport './InputBar.css';\n\nconst InputBar = ({stats, setStats, name, sendPlayerData, sendPlayerRoll }) => {\n\n  const [playerIconPreview, setPlayerIconPreview] = useState(\"\")\n  \n\n  // const  setDiceRoll = async (roll) => {\n  //   await setStats({...stats, dice: roll})\n  //   // sendPlayerData()\n  // }\n\n  \n\n\n  return (\n  <form className=\"inputBarContainer\" onSubmit={sendPlayerData}>\n\n    <div className=\"charBox3\">\n      <img src={stats.portrait} alt=\"pretty character\"></img>\n\n    </div>\n\n    <div className=\"charBox1\">\n\n    <div className=\"input-character-name\">\n      <h1>{name}</h1>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Hit Points</p>\n    <input \n    className=\"charInput\"\n    value={stats.hp}\n    onChange={(event) => setStats({...stats, hp: event.target.value})}\n    // value={props.playerData}\n    // onChange={(event) => props.setPlayerData(event.target.value)}\n    // onKeyPress={event => event.key === 'Enter' ? props.sendPlayerData(event) : null}\n    >\n    </input>\n    </div>\n\n\n    <div className=\"charInputDiv\">\n      <p>Armor Class</p>\n      <input className=\"charInput\"\n        value={stats.ac}\n        onChange={(event) => setStats({...stats, ac: event.target.value})}\n      >\n      </input>\n      {/* <button onClick={() => console.log(stats)}>ShowState</button> */}\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Melee Bonus</p>\n      <input className=\"charInput\"\n      value={stats.melee}\n      onChange={(event) => setStats({...stats, melee: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Ranged Bonus</p>\n      <input className=\"charInput\"\n      value={stats.ranged}\n      onChange={(event) => setStats({...stats, ranged: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Portrait URL</p>\n      <input className=\"charInput\"\n      value={stats.portrait}\n      onChange={(event) => setStats({...stats, portrait: event.target.value})}>\n        \n      </input>\n    </div>\n\n    {/* </div>\n\n  <div className=\"charBox2\"> */}\n\n    <div className=\"charInputDiv\">\n      <p>Strength Save</p>\n      <input className=\"charInput\"\n      value={stats.str}\n      onChange={(event) => setStats({...stats, str: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Dexterity Save</p>\n      <input className=\"charInput\"\n      value={stats.dex}\n      onChange={(event) => setStats({...stats, dex: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Constitution Save</p>\n      <input className=\"charInput\"\n      value={stats.con}\n      onChange={(event) => setStats({...stats, con: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Intelligence save</p>\n      <input className=\"charInput\"\n      value={stats.int}\n      onChange={(event) => setStats({...stats, int: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Wisdom Save</p>\n      <input className=\"charInput\"\n      value={stats.wis}\n      onChange={(event) => setStats({...stats, wis: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Charisma Save</p>\n      <input className=\"charInput\"\n      value={stats.cha}\n      onChange={(event) => setStats({...stats, cha: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"submit-stats-container\">\n      <button className=\"submit-stats\" type=\"button\" onClick={sendPlayerData} >Update Stats</button>\n    </div>\n  </div>\n\n\n    {/* <div className=\"charBox4\">\n      <img id=\"diceImage\" src={Dice} alt=\"dice\"></img>\n\n    </div>\n\n\n    <DiceRoll sendPlayerRoll={sendPlayerRoll} setStats={setStats} sendPlayerData={sendPlayerData}/>\n  <button className='sendButton' type='submit'>Set Stats</button> */}\n  </form>\n\n  \n  )\n  \n}\n\nexport default InputBar","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceRoll.js",["113"],"/Users/scottbillings/Desktop/D&D/client/src/Components/Character.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/DiceLoad.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Messaging.js",["114","115"],"import React, {useState, useEffect} from 'react';\nimport './Messaging.css';\nimport MessageDisplay from './MessageDisplay';\nimport DropDowns from './DropDowns';\nimport MessageInput from './MessageInput';\n\n\n\n\nconst Messaging = ({setMessage, sendPlayerMessage, message, setRecipients, users, recipients, messages, name, unreadMessages, setUnreadMessages}) => {\n\n  useEffect(() => {\n    return () => {\n      setRecipients([name])\n    }\n  },[setRecipients, name])\n\n  useEffect(() => {\n    setUnreadMessages(0)\n  }, [])\n\n  //this clears the recipients when they close the drawer (unmount) otherwise it will cause all kinds of issues \n  \n\n\n  return(\n    <div className=\"messaging-container\">\n    <DropDowns users={users} setRecipients={setRecipients} recipients={recipients} name={name}/>\n    <MessageDisplay messages={messages} name={name}/>\n    <MessageInput setMessage={setMessage} sendPlayerMessage={sendPlayerMessage} message={message}/>\n\n    </div>\n  )\n}\n\nexport default Messaging","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/DropDowns.js",["116"],"import React, {useState, useEffect} from 'react';\nimport './DropDowns.css';\n\nconst DropDowns = ({users, setRecipients, recipients, name}) => {\nconst [drop1Extended, setDrop1Extended] = useState(false)\nconst [drop2Extended, setDrop2Extended] = useState(false)\nconst [userArray, setUserArray] = useState()\n\n\nuseEffect(() => {\n  setUserArray(users.filter(user => user.name !== name))\n},[name, users])\n\n\n  const showDropDown = () => {\n    if (drop1Extended) {\n      setDrop1Extended(false)\n    }\n    if (!drop1Extended) {\n      setDrop1Extended(true)\n    }\n  }\n\n  const showDropDown2 = () => {\n    if (drop2Extended) {\n      setDrop2Extended(false)\n    }\n    if (!drop2Extended) {\n      setDrop2Extended(true)\n    }\n  }\n\n  const handleCheckboxChange = (event) => {\n    let newArray = [...recipients, event.target.id];\n    if (recipients.includes(event.target.id)) {\n      newArray = newArray.filter(user => user !== event.target.id)\n    }\n    setRecipients(newArray)\n    console.log(recipients)\n  }\n\n  return (\n    <div className=\"dropdown-container\">\n      <form>\n        {/* <div className='multi-select'>\n          <div className=\"select-box\" onClick={showDropDown}>\n          <select>\n            <options>Select A Languages</options>\n          </select>\n            <div className=\"over-select\"><p>Select A Language</p></div>\n          </div>\n          <div id={drop1Extended ? \"check-boxes-expanded\" : \"check-boxes\"}>\n            <label for=\"language-one\"><input type=\"checkbox\" id=\"language-one\"/>First Checkbox</label>\n            <label for=\"language-two\"><input type=\"checkbox\" id=\"language-two\"/>Second Checkbox</label>\n            <label for=\"language-three\"><input type=\"checkbox\" id=\"language-three\"/>Third Checkbox</label>\n\n          </div>\n\n\n        </div> */}\n\n\n        <div className='multi-select2'>\n          <div className=\"select-box\" onClick={showDropDown2}>\n          <select>\n            <options>Select Players</options>\n          </select>\n            <div className=\"over-select\"><p>Select Players To Recieve</p></div>\n          </div>\n          <div id={drop2Extended ? \"check-boxes-expanded\" : \"check-boxes\"}>\n          {users && userArray && userArray.map((user) => <label key={user.id} for={user.name}><input type=\"checkbox\" id={user.name} onChange={handleCheckboxChange}/>{user.name}</label>)}\n\n          \n          \n            \n\n          </div>\n\n\n        </div>\n      </form>\n\n    </div>\n  )\n}\n\nexport default DropDowns;","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageInput.js",["117","118"],"import React, {useState, useEffect} from 'react'\nimport './MessageInput.css';\n\nconst MessageInput = ({message, setMessage, sendPlayerMessage}) => {\n  return(\n    <form className=\"messaging-form\">\n    <textarea\n      className=\"messaging-input\"\n      type=\"\"\n      placeholder=\"Type a message...\"\n      value={message}\n      onChange={({ target: { value } }) => setMessage(value)}\n      onKeyPress={event => event.key === 'Enter' ? sendPlayerMessage(event) : null}\n    />\n    <button className=\"messaging-sendButton\" onClick={e => sendPlayerMessage(e)}>Send</button>\n  </form>\n  )\n}\n\nexport default MessageInput;\n\n","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageDisplay.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Message.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideBar.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/BackDrop.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/MapDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Maps/WorldMap.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/PostDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Post/Post.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPCDisplay.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPC.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Dice/Dice.js",["119"],"import React, {useState} from 'react'\nimport './Dice.css';\nimport DiceRoll from '../DiceRoll'\nimport DicePic from '../../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png'\n\n\nconst Dice = ({sendPlayerRoll}) => {\n  return (\n    <div className=\"dice-container\">\n      <div className=\"dice-picture-container\">\n        <img src={DicePic} alt=\"\"></img>\n      </div>\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\n\n    </div>\n  )\n}\n\nexport default Dice;","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/Combat.js",["120","121","122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":14,"column":11,"nodeType":"129","messageId":"130","endLine":14,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":73,"column":6,"nodeType":"133","endLine":73,"endColumn":33,"suggestions":"134"},{"ruleId":"127","severity":1,"message":"135","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":12},{"ruleId":"127","severity":1,"message":"136","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":16},{"ruleId":"127","severity":1,"message":"137","line":8,"column":10,"nodeType":"129","messageId":"130","endLine":8,"endColumn":27},{"ruleId":"127","severity":1,"message":"138","line":8,"column":29,"nodeType":"129","messageId":"130","endLine":8,"endColumn":49},{"ruleId":"127","severity":1,"message":"139","line":4,"column":15,"nodeType":"129","messageId":"130","endLine":4,"endColumn":21},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"131","severity":1,"message":"141","line":20,"column":6,"nodeType":"133","endLine":20,"endColumn":8,"suggestions":"142"},{"ruleId":"127","severity":1,"message":"143","line":15,"column":9,"nodeType":"129","messageId":"130","endLine":15,"endColumn":21},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"144","line":1,"column":26,"nodeType":"129","messageId":"130","endLine":1,"endColumn":35},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"140","line":1,"column":27,"nodeType":"129","messageId":"130","endLine":1,"endColumn":35},{"ruleId":"127","severity":1,"message":"145","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":29},{"ruleId":"131","severity":1,"message":"146","line":41,"column":6,"nodeType":"133","endLine":41,"endColumn":13,"suggestions":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'room' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recipients' and 'stats'. Either include them or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.","ArrayExpression",["150"],"'Dice' is defined but never used.","'DiceRoll' is defined but never used.","'playerIconPreview' is assigned a value but never used.","'setPlayerIconPreview' is assigned a value but never used.","'Howler' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'setUnreadMessages'. Either include it or remove the dependency array. If 'setUnreadMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["151"],"'showDropDown' is assigned a value but never used.","'useEffect' is defined but never used.","'GiConsoleController' is defined but never used.","React Hook useEffect has missing dependencies: 'setUserXPosition' and 'setUserYPosition'. Either include them or remove the dependency array. If 'setUserXPosition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [ENDPOINT, location.search, recipients, stats]",{"range":"159","text":"160"},"Update the dependencies array to be: [setUnreadMessages]",{"range":"161","text":"162"},"Update the dependencies array to be: [setUserXPosition, setUserYPosition, users]",{"range":"163","text":"164"},[2495,2522],"[ENDPOINT, location.search, recipients, stats]",[510,512],"[setUnreadMessages]",[1548,1555],"[setUserXPosition, setUserYPosition, users]"]
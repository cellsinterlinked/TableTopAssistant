[{"/Users/scottbillings/Desktop/D&D/client/src/index.js":"1","/Users/scottbillings/Desktop/D&D/client/src/App.js":"2","/Users/scottbillings/Desktop/D&D/client/src/Pages/Join.js":"3","/Users/scottbillings/Desktop/D&D/client/src/Pages/Play.js":"4","/Users/scottbillings/Desktop/D&D/client/src/Components/InputBar.js":"5","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceRoll.js":"6","/Users/scottbillings/Desktop/D&D/client/src/Components/Character.js":"7","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceLoad.js":"8","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Messaging.js":"9","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/DropDowns.js":"10","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageInput.js":"11","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageDisplay.js":"12","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Message.js":"13","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideBar.js":"14","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideDrawer.js":"15","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/BackDrop.js":"16","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/MapDrawer.js":"17","/Users/scottbillings/Desktop/D&D/client/src/Components/Maps/WorldMap.js":"18","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/PostDrawer.js":"19","/Users/scottbillings/Desktop/D&D/client/src/Components/Post/Post.js":"20","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPCDisplay.js":"21","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPC.js":"22","/Users/scottbillings/Desktop/D&D/client/src/Components/Dice/Dice.js":"23","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/Combat.js":"24","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/ErrorModal.js":"25","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Modal.js":"26","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Help.js":"27","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/CustomDropdown.js":"28","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MessageDropDown.js":"29","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/MonsterCreator.js":"30","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterDropDown.js":"31","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterInputs.js":"32","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/MonsterListItem.js":"33","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerMovement.js":"34","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/FrontDropDown.js":"35","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerListItem.js":"36","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/Exit.js":"37","/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/DiceDrawer.js":"38","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/NotificationModal.js":"39","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerCombat.js":"40","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerInitiative.js":"41"},{"size":167,"mtime":1617306038458,"results":"42","hashOfConfig":"43"},{"size":340,"mtime":1611171411057,"results":"44","hashOfConfig":"43"},{"size":1771,"mtime":1620324187930,"results":"45","hashOfConfig":"43"},{"size":16397,"mtime":1620332040178,"results":"46","hashOfConfig":"43"},{"size":4342,"mtime":1617922963845,"results":"47","hashOfConfig":"43"},{"size":2877,"mtime":1617306038434,"results":"48","hashOfConfig":"43"},{"size":3181,"mtime":1620166651264,"results":"49","hashOfConfig":"43"},{"size":322,"mtime":1617306038433,"results":"50","hashOfConfig":"43"},{"size":1210,"mtime":1619634612870,"results":"51","hashOfConfig":"43"},{"size":2765,"mtime":1620317222582,"results":"52","hashOfConfig":"43"},{"size":613,"mtime":1617306038437,"results":"53","hashOfConfig":"43"},{"size":652,"mtime":1617306038437,"results":"54","hashOfConfig":"43"},{"size":898,"mtime":1619742516406,"results":"55","hashOfConfig":"43"},{"size":9452,"mtime":1620232563366,"results":"56","hashOfConfig":"43"},{"size":559,"mtime":1617306038441,"results":"57","hashOfConfig":"43"},{"size":326,"mtime":1617306038439,"results":"58","hashOfConfig":"43"},{"size":552,"mtime":1617306038440,"results":"59","hashOfConfig":"43"},{"size":597,"mtime":1617306038435,"results":"60","hashOfConfig":"43"},{"size":552,"mtime":1617306038440,"results":"61","hashOfConfig":"43"},{"size":3527,"mtime":1620329885421,"results":"62","hashOfConfig":"43"},{"size":1581,"mtime":1619546379932,"results":"63","hashOfConfig":"43"},{"size":2365,"mtime":1619658851210,"results":"64","hashOfConfig":"43"},{"size":491,"mtime":1617306038433,"results":"65","hashOfConfig":"43"},{"size":7190,"mtime":1620326485591,"results":"66","hashOfConfig":"43"},{"size":625,"mtime":1620329155173,"results":"67","hashOfConfig":"43"},{"size":1134,"mtime":1620328891252,"results":"68","hashOfConfig":"43"},{"size":895,"mtime":1617732512383,"results":"69","hashOfConfig":"43"},{"size":2578,"mtime":1620325164812,"results":"70","hashOfConfig":"43"},{"size":2490,"mtime":1617929914601,"results":"71","hashOfConfig":"43"},{"size":6123,"mtime":1620327323792,"results":"72","hashOfConfig":"43"},{"size":2948,"mtime":1620325310311,"results":"73","hashOfConfig":"43"},{"size":1776,"mtime":1619058164750,"results":"74","hashOfConfig":"43"},{"size":1279,"mtime":1620055084202,"results":"75","hashOfConfig":"43"},{"size":902,"mtime":1620233162686,"results":"76","hashOfConfig":"43"},{"size":2626,"mtime":1620324842704,"results":"77","hashOfConfig":"43"},{"size":1204,"mtime":1620171039345,"results":"78","hashOfConfig":"43"},{"size":407,"mtime":1619737416667,"results":"79","hashOfConfig":"43"},{"size":552,"mtime":1620145194740,"results":"80","hashOfConfig":"43"},{"size":1268,"mtime":1620150351950,"results":"81","hashOfConfig":"43"},{"size":7113,"mtime":1620232600677,"results":"82","hashOfConfig":"43"},{"size":1672,"mtime":1620168827487,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"feu3fp",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/scottbillings/Desktop/D&D/client/src/index.js",[],["181","182"],"/Users/scottbillings/Desktop/D&D/client/src/App.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Pages/Join.js",["183","184"],"/Users/scottbillings/Desktop/D&D/client/src/Pages/Play.js",["185","186","187","188","189","190","191","192"],"/Users/scottbillings/Desktop/D&D/client/src/Components/InputBar.js",["193","194","195","196","197"],"import React, { useState, useEffect } from 'react';\nimport Dice from '../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png';\nimport DiceRoll from './DiceRoll';\nimport './InputBar.css';\n\nconst InputBar = ({stats, setStats, name, sendPlayerData, sendPlayerRoll }) => {\n\n  const [playerIconPreview, setPlayerIconPreview] = useState(\"\")\n  const [correctName, setCorrectName] = useState(\"\")\n  \n  useEffect(() => {\n    setCorrectName(newName())\n  })\n  // const  setDiceRoll = async (roll) => {\n  //   await setStats({...stats, dice: roll})\n  //   // sendPlayerData()\n  // }\n  const newName = () => {\n    const caps = name.charAt(0).toUpperCase() + name.slice(1);\n    return caps;\n    \n  }\n  \n\n\n  return (\n  <form className=\"inputBarContainer\" onSubmit={sendPlayerData}>\n\n    <div className=\"charBox3\">\n      <img src={stats.portrait} alt=\"ADD URL FOR CHARACTER PORTRAIT BELOW\"></img>\n\n    </div>\n\n    <div className=\"charBox1\">\n\n    <div className=\"input-character-name\">\n      <h1>{correctName}</h1>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Hit Points</p>\n    <input \n    className=\"charInput\"\n    value={stats.hp}\n    onChange={(event) => setStats({...stats, hp: event.target.value})}\n    // value={props.playerData}\n    // onChange={(event) => props.setPlayerData(event.target.value)}\n    // onKeyPress={event => event.key === 'Enter' ? props.sendPlayerData(event) : null}\n    >\n    </input>\n    </div>\n\n\n    <div className=\"charInputDiv\">\n      <p>Armor Class</p>\n      <input className=\"charInput\"\n        value={stats.ac}\n        onChange={(event) => setStats({...stats, ac: event.target.value})}\n      >\n      </input>\n      {/* <button onClick={() => console.log(stats)}>ShowState</button> */}\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Melee Bonus</p>\n      <input className=\"charInput\"\n      value={stats.melee}\n      onChange={(event) => setStats({...stats, melee: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Ranged Bonus</p>\n      <input className=\"charInput\"\n      value={stats.ranged}\n      onChange={(event) => setStats({...stats, ranged: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Portrait URL</p>\n      <input className=\"charInput\"\n      value={stats.portrait}\n      onChange={(event) => setStats({...stats, portrait: event.target.value})}>\n        \n      </input>\n    </div>\n\n    {/* </div>\n\n  <div className=\"charBox2\"> */}\n\n    <div className=\"charInputDiv\">\n      <p>Strength Save</p>\n      <input className=\"charInput\"\n      value={stats.str}\n      onChange={(event) => setStats({...stats, str: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Dexterity Save</p>\n      <input className=\"charInput\"\n      value={stats.dex}\n      onChange={(event) => setStats({...stats, dex: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Constitution Save</p>\n      <input className=\"charInput\"\n      value={stats.con}\n      onChange={(event) => setStats({...stats, con: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Intelligence save</p>\n      <input className=\"charInput\"\n      value={stats.int}\n      onChange={(event) => setStats({...stats, int: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Wisdom Save</p>\n      <input className=\"charInput\"\n      value={stats.wis}\n      onChange={(event) => setStats({...stats, wis: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Charisma Save</p>\n      <input className=\"charInput\"\n      value={stats.cha}\n      onChange={(event) => setStats({...stats, cha: event.target.value})}\n      ></input>\n    </div>\n\n    <div className=\"submit-stats-container\">\n      <button className=\"submit-stats\" type=\"button\" onClick={sendPlayerData} >Update Stats</button>\n    </div>\n  </div>\n\n\n    {/* <div className=\"charBox4\">\n      <img id=\"diceImage\" src={Dice} alt=\"dice\"></img>\n\n    </div>\n\n\n    <DiceRoll sendPlayerRoll={sendPlayerRoll} setStats={setStats} sendPlayerData={sendPlayerData}/>\n  <button className='sendButton' type='submit'>Set Stats</button> */}\n  </form>\n\n  \n  )\n  \n}\n\nexport default InputBar","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceRoll.js",["198"],"import React, { useState } from 'react';\nimport './DiceRoll.css';\nimport diceSound from  '../Resources/diceRoll.mp3';\nimport {Howl, Howler} from 'howler';\n\nconst DiceRoll = ({sendPlayerRoll}) => {\n  const [result, setResult] = useState(null)\n  const [type, setType] = useState(4)\n  const [number, setNumber] = useState(1)\n\n  const audioClips = [\n    {sound: diceSound, label: \"dice\"}\n  ]\n\n\n  const diceOptions = [\n    {\n      label: \"D4\",\n      value: 4\n    },\n    {\n      label: \"D6\",\n      value: 6\n    },\n    {\n      label: \"D8\",\n      value: 8\n    },\n    {\n      label: \"D10\",\n      value: 10\n    },\n    {\n      label: \"D12\",\n      value: 12\n    },\n    {\n      label: \"D20\",\n      value: 20\n    },\n\n  ]\n\n  const diceCount = [\n    {\n      label: 1,\n      value: 1\n    },\n    {\n      label: 2,\n      value: 2\n    },\n    {\n      label: 3,\n      value: 3\n    },\n    {\n      label: 4,\n      value: 4\n    },\n    {\n      label: 5,\n      value: 5\n    },\n    {\n      label: 6,\n      value: 6\n    },\n  ]\n\n  const handleType = (event) => {\n    setType(event.target.value)\n  }\n\n  const handleNumber = (event) => {\n    setNumber(event.target.value)\n  }\n\n  const diceMaths = () => {\n    let diceVal = 0\n    if (number > 1) {\n      for (let i = 1;  i <= number; i++) {\n        diceVal = diceVal + Math.floor(Math.random() * type) + 1\n        \n      }\n    } else {\n      diceVal = Math.floor(Math.random() * type) + 1\n    }\n    setResult(diceVal);\n    sendPlayerRoll(diceVal)\n    diceFunc(audioClips[0].sound)\n    // console.log(diceVal);\n  }\n\n  const diceFunc = (src) => {\n    const sound = new Howl({\n      src\n    })\n    sound.play();\n  }\n\n  const clearRoll = () => {\n    setResult(null);\n    setType(4);\n    setNumber(1);\n  }\n\n  return (\n    <div className=\"diceRollContainer\">\n      <div className=\"diceSelectContainer\">\n      <div className=\"custom-select\">\n        <select className=\"diceSelect\" onChange={handleType} value={type}>\n          {diceOptions.map((option) => (\n            <option key={option.value} value={option.value}>{option.label}</option>\n          ))}\n        </select>\n        <span className=\"custom-arrow\" />\n      </div>\n\n      <div className=\"custom-select\">\n        <select className=\"diceSelect\" onChange={handleNumber} value={number}>\n          {diceCount.map((count) => (\n            <option key={count.value }value={count.value}>{count.label}</option>\n          ))}\n        </select>\n        <span className=\"custom-arrow\" />\n      </div>\n      </div>\n      <div className=\"diceButtonContainer\">\n        <button type=\"button\" onClick={clearRoll}>CLEAR</button>\n        <button type=\"button\" onClick={diceMaths}>ROLL DICE</button>\n      </div>\n      <div className=\"diceResultContainer\">\n            <div className=\"diceResultBackground\">\n          {result && <h1>{result}</h1>}\n            </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default DiceRoll;","/Users/scottbillings/Desktop/D&D/client/src/Components/Character.js",["199"],"import React, {useState, useEffect} from 'react';\nimport './Character.css';\nimport DiceLoad from './DiceLoad';\nimport {GiIciclesAura} from 'react-icons/gi';\nimport {MdLiveHelp} from 'react-icons/md'\n\nconst Character = ({partyRolls, partyData, name, individualRole}) => {\n  const [playerStats, setPlayerStats] = useState(null)\n  const [isLoading, setIsLoading] = useState(false);\n  const [correctName, setCorrectName] = useState(\"\")\n\n  // let user = props.name\n\n  // let playerStats = props.partyData[user] || null;\n  // let playerRoll = props.partyRolls[user]\n\n  const funFunction = async () => {\n     setIsLoading(true)\n     setTimeout(() => {setIsLoading(false)}, 1000)\n\n  }\n\n  useEffect(() => {\n  \n    setPlayerStats(partyData[name])\n    setCorrectName(newName())\n  },[partyData, name])\n\n  useEffect(() => {\n    funFunction()\n  }, [individualRole])\n\n  \nconst newName = () => {\n  const caps = name.charAt(0).toUpperCase() + name.slice(1);\n  return caps;\n  \n}\n\n\n  return (\n    <>\n    {!playerStats && <div className='char-Container'>\n      <div className=\"empty-character\">\n        <h1 className=\"update-char-name\">{correctName}</h1>\n        <h1 className=\"update-stats-h1\">UPDATE YOUR STATS!</h1>\n        <div className=\"stats-directions\">\n          <p>CLICK THE CHARACTER ICON ON RIGHT SIDE NAVIGATION TOOL</p>\n          <GiIciclesAura style={{height: \"3rem\", width: \"auto\"}}/>\n          <p>IF YOU NEED HELP WITH ANY OTHER PART OF THE USER INTERFACE, CLICK THE TUTORIAL ICON</p>\n          <MdLiveHelp style={{height: \"3rem\", width: \"auto\"}} />\n        </div>\n\n      </div>\n      </div>}\n\n\n    {playerStats &&  <div className='char-Container'>\n      {/* <button onClick={() => console.log(playerStats)}>CharacterInfo</button> */}\n      <div className=\"player-container-1\">\n        <div className=\"i-hate-you\">\n          <img alt=\"\" src={partyData[name].text.portrait}></img>\n        </div>\n        <h1>{correctName}</h1>\n        </div>\n\n\n\n\n\n      <div className=\"player-container-2\">\n        <div className='player-stat-holder'>\n          <div className='stats-1'>\n\n            <p>HP {playerStats.text.hp}</p>  \n            <p>AC {playerStats.text.ac}</p>\n            <p>Melee+ {playerStats.text.melee}</p>\n            <p>Ranged+ {playerStats.text.ranged}</p>\n            <p>P.P. +</p>\n            <p>P.I. +</p>\n          </div>\n          <div className='stats-2'> \n            <p>Str+ {playerStats.text.str}</p>\n            <p>Dex+ {playerStats.text.dex}</p>\n            <p>Con+ {playerStats.text.con}</p>\n            <p>Wis+ {playerStats.text.wis}</p>\n            <p>Int+ {playerStats.text.int}</p>\n            <p>Con+ {playerStats.text.cha}</p>\n          </div>\n        </div>\n        <div className='player-dice-display'>\n          <h1 className=\"player-display-roll-text\">Recent Dice Roll</h1>\n          {!isLoading && <div className='player-dice-box'>\n             {individualRole === undefined ? <p>0</p> : <p>{individualRole.number}</p>}\n            {/* <button onClick={() => console.log(playerRoll.number)}>Click</button> */}\n          </div>}\n          {isLoading && <DiceLoad/>}\n        </div>\n\n      \n      </div>\n    </div>}\n    </>\n  )\n}\n\nexport default Character;","/Users/scottbillings/Desktop/D&D/client/src/Components/DiceLoad.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Messaging.js",["200","201","202"],"import React, {useState, useEffect} from 'react';\nimport './Messaging.css';\nimport MessageDisplay from './MessageDisplay';\nimport DropDowns from './DropDowns';\nimport MessageInput from './MessageInput';\nimport MessageDropdown from '../Reusable/MessageDropDown';\n\n\n\n\nconst Messaging = ({setMessage, sendPlayerMessage, message, setRecipients, users, recipients, messages, name, unreadMessages, setUnreadMessages}) => {\n\n  useEffect(() => {\n    return () => {\n      setRecipients([name])\n      // console.log(recipients)\n    }\n  },[setRecipients, name])\n\n  useEffect(() => {\n    setUnreadMessages(0)\n  }, [])\n\n  //this clears the recipients when they close the drawer (unmount) otherwise it will cause all kinds of issues \n  \n\n\n  return(\n    <div className=\"messaging-container\">\n    <DropDowns users={users} setRecipients={setRecipients} recipients={recipients} name={name}/>\n    {/* <MessageDropdown items={users} name={name} singleState={recipients} setSingleState={setRecipients} title=\"CHOOSE RECIPIENTS\"/> */}\n    <MessageDisplay messages={messages} name={name}/>\n    <MessageInput setMessage={setMessage} sendPlayerMessage={sendPlayerMessage} message={message}/>\n\n    </div>\n  )\n}\n\nexport default Messaging","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/DropDowns.js",["203"],"import React, {useState, useEffect} from 'react';\nimport './DropDowns.css';\nimport {MdExpandMore} from 'react-icons/md';\n\nconst DropDowns = ({users, setRecipients, recipients, name}) => {\nconst [drop1Extended, setDrop1Extended] = useState(false)\nconst [drop2Extended, setDrop2Extended] = useState(false)\nconst [userArray, setUserArray] = useState()\n\n\n\nuseEffect(() => {\n  setUserArray(users.filter(user => user.name !== name))\n},[name, users])\n\n\n  const showDropDown = () => {\n    if (drop1Extended) {\n      setDrop1Extended(false)\n    }\n    if (!drop1Extended) {\n      setDrop1Extended(true)\n    }\n  }\n\n  const showDropDown2 = () => {\n    if (drop2Extended) {\n      setDrop2Extended(false)\n    }\n    if (!drop2Extended) {\n      setDrop2Extended(true)\n    }\n  }\n\n  \n\n  const handleCheckboxChange = (event) => {\n    // console.log(recipients)\n    let newArray = [...recipients, event.target.id];\n    if (recipients.includes(event.target.id)) {\n      newArray = newArray.filter(user => user !== event.target.id)\n    }\n    setRecipients(newArray)\n    // console.log(recipients)\n  }\n\n  return (\n    <div className=\"dropdown-container\" onMouseLeave={() => setDrop2Extended(false)}>\n      <form>\n        {/* <div className='multi-select'>\n          <div className=\"select-box\" onClick={showDropDown}>\n          <select>\n            <options>Select A Languages</options>\n          </select>\n            <div className=\"over-select\"><p>Select A Language</p></div>\n          </div>\n          <div id={drop1Extended ? \"check-boxes-expanded\" : \"check-boxes\"}>\n            <label for=\"language-one\"><input type=\"checkbox\" id=\"language-one\"/>First Checkbox</label>\n            <label for=\"language-two\"><input type=\"checkbox\" id=\"language-two\"/>Second Checkbox</label>\n            <label for=\"language-three\"><input type=\"checkbox\" id=\"language-three\"/>Third Checkbox</label>\n\n          </div>\n\n\n        </div> */}\n\n\n        <div className='multi-select2'>\n          <div className=\"select-box\" onClick={showDropDown2}>\n          <select>\n            <options>Select Players</options>\n          </select>\n            <div className=\"over-select\"><p>SELECT RECIPIENTS</p><MdExpandMore className={drop2Extended ? \"down-drop rotated\" : \"down-drop\"}/></div>\n          </div>\n          <div id={drop2Extended ? \"check-boxes-expanded\" : \"check-boxes\"} >\n          {users && userArray && userArray.map((user) => <label key={user.id} for={user.name}>\n            <input className=\"recipient-check-box\" type=\"checkbox\" id={user.name} onChange={handleCheckboxChange}/>\n              <p className=\"recipient-name-list\">{user.name}</p>\n              </label>)}\n\n          \n          \n            \n\n          </div>\n\n\n        </div>\n      </form>\n\n    </div>\n  )\n}\n\nexport default DropDowns;","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageInput.js",["204","205"],"import React, {useState, useEffect} from 'react'\nimport './MessageInput.css';\n\nconst MessageInput = ({message, setMessage, sendPlayerMessage}) => {\n  return(\n    <form className=\"messaging-form\">\n    <textarea\n      className=\"messaging-input\"\n      type=\"\"\n      placeholder=\"Type a message...\"\n      value={message}\n      onChange={({ target: { value } }) => setMessage(value)}\n      onKeyPress={event => event.key === 'Enter' ? sendPlayerMessage(event) : null}\n    />\n    <button className=\"messaging-sendButton\" onClick={e => sendPlayerMessage(e)}>Send</button>\n  </form>\n  )\n}\n\nexport default MessageInput;\n\n","/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/MessageDisplay.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Messaging/Message.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideBar.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/SideDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/BackDrop.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/MapDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Maps/WorldMap.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/PostDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Post/Post.js",["206"],"import React, {useState} from 'react'\nimport './Post.css';\n\nconst Post = (props) => {\n  const [tempWorld, setTempWorld] = useState(\"\")\n  const [tempChar, setTempChar] = useState({portrait: \"\", name: \"\"})\n  const [tempCombatMap, setTempCombatMap] = useState('')\n  // const [tempCharName, setTempCharName] = useState(null)\n\n  // NEXT THING TO DO build out tempCombatMap and use setCombatMap from props to send\n  \n\n  const newMapHandler = () => {\n    if(tempWorld !== \"\") {props.sendMapData(tempWorld)\n      props.showNotification('Map Was Posted!')\n      console.log(\"should be firing\")\n    }\n    setTempWorld(\"\");\n    document.getElementById(\"mapInput\").value = \"\"\n    console.log(`new map handler is working ${tempWorld} is map`)\n  }\n\n  const newNPCHandler = () => {\n    if(tempChar.name && tempChar.portrait !== \"\") {props.sendNPCData(tempChar)\n      props.showNotification('New NPC Was Added!')\n      console.log(\"should be firing\")\n    }\n    setTempChar({portrait: \"\", name: \"\"})\n    document.getElementById(\"portrait-input\").value = \"\"\n    document.getElementById(\"npc-name-input\").value = \"\"\n  }\n\n  const newCombatHandler = () => {\n    if(tempCombatMap !== '') {props.sendCombatMap(tempCombatMap)\n      props.showNotification('Combat Map Was Added!')\n      console.log(\"should be firing\")\n    \n    }\n    setTempCombatMap('')\n    document.getElementById('battle-map-input').value = \"\"\n  }\n\n  const checkState = () => {\n    console.log(tempChar)\n  }\n\n  return(\n    <div className=\"postContainer\">\n      <div className=\"worldContainer\">\n      <p>POST A MAP</p>\n      <input id=\"mapInput\" placeholder=\"Map URL\" className=\"mapInput\" type=\"text\" value={tempWorld} onChange={(event) => setTempWorld(event.target.value)}></input>\n      <div className=\"worldButtonContainer\"><button className=\"worldSubmitButton\" onClick={newMapHandler}>SET MAP</button></div>\n      {tempWorld && <div className=\"mapPrev\"><img src={tempWorld} alt=\"\" /></div>}\n      </div>\n\n      <div className=\"portraitContainer\">\n        <p>POST AN NPC</p>\n        <input id=\"portrait-input\" placeholder=\"Portrait URL\" className=\"portraitInput\" type=\"text\" value={tempChar.portrait} onChange={(event) => setTempChar({...tempChar, portrait: event.target.value})}></input>\n        <input id=\"npc-name-input\" placeholder=\"Name\" className=\"portraitInput\" type=\"text\" value={tempChar.name} onChange={(event) => setTempChar({...tempChar, name:event.target.value})}></input>\n        <div className=\"portraitButtonContainer\"><button className=\"portraitSubmitButton\" onClick={newNPCHandler}>CREATE NPC</button></div>\n        {/* <div className=\"portraitButtonContainer\"><button className=\"portraitSubmitButton\" onClick={checkState}>Check state</button></div> */}\n        {tempChar && <div className=\"portraitPreview\"><img src={tempChar.portrait} alt=\"\" /></div>}\n        {/* {tempCharArray !== [] && <div className=\"portraitListContainer\">Pictures of Stuff</div> } */}\n        \n      </div>\n\n      <div className=\"battle-map-post-container\">\n        <p>POST A COMBAT MAP</p>\n        <input id=\"battle-map-input\" placeholder=\"Battle Map URL\" className=\"mapInput\" type=\"text\" value={tempCombatMap} onChange={(event) => setTempCombatMap(event.target.value)}></input>\n        <div className=\"worldButtonContainer\"><button className=\"worldSubmitButton\" onClick={newCombatHandler}>SET COMBAT MAP</button></div>\n        {tempCombatMap && <div className=\"mapPrev\"><img src={tempCombatMap} alt=\"URL Not Valid\"/></div>}\n\n      </div>\n\n\n      \n\n    </div>\n  )\n}\nexport default Post;","/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPCDisplay.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/NPC/NPC.js",["207"],"import React, {useState, useEffect} from 'react';\nimport './NPC.css';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\n\nconst NPC = ({item, deleteNPCData, sendNPCNote, notePost, setNotePost, npcNotes, role}) => {\n  const [localNotes, setLocalNotes] = useState()\n  const [displayNotes, setDisplayNotes] = useState(false);\n  // const [notePost, setNotePost] = useState(\"\")\n\n  useEffect(() => {\n    console.log(npcNotes, localNotes)\n    setLocalNotes(npcNotes[item.name])\n  },[npcNotes])\n\n\n  const notesHandler = () => {\n    setDisplayNotes(true)\n  }\n\n  const protraitHandler = () => {\n    setDisplayNotes(false)\n  }\n\n  const deleteHandler = () => {\n    deleteNPCData(item.name)\n  }\n\n  const noteHandler = async() => {\n    // let noteObject = {name: item.name, note: notePost}\n     if (notePost !== null) {await sendNPCNote(item.name)}\n    document.getElementById(\"noteInput\").value = \"\"\n    // setLocalNotes([...npcNotes[item.name]])\n\n    console.log(\"noteHandler fired\", [...npcNotes[item.name]])\n    // well thats completely fucked to begin with \n    // this shouldn't even include this last part.  that will be done be the useEffect at the top when the new messsage is sent. \n  }\n\n\n  return( \n    <div className=\"npc-card\">\n\n      {displayNotes && \n      <div className=\"scroll-hate\">\n        <h1 className=\"notes-header\">Notes</h1>\n      <ScrollToBottom className=\"npc-notes-container\">\n        {localNotes !== [] && localNotes.map((note, index) => (<li key={index}>{note}</li>) )}\n        {localNotes === [] && <h1>Enter Text Below To Leave Notes About This NPC</h1>}\n      </ScrollToBottom>\n      </div>}\n      {displayNotes &&\n        <div className=\"npc-notes-input-container\">\n        <textarea id=\"noteInput\" className=\"npc-notes-input\" placeholder=\"Add a new note\" onChange={(event) => setNotePost(event.target.value)}>\n\n        </textarea>\n        <button onClick={noteHandler}>Write Note</button>\n        </div>\n        \n      \n      }\n\n        \n\n      \n      {!displayNotes && <div className=\"npc-image\">\n        <img src={item.portrait} alt=\"\"></img>\n      </div>}\n      <p>{item.name}</p>\n      {role === \"DM\" && <button onClick={deleteHandler}>DELETE</button>}\n      {!displayNotes && <button onClick={notesHandler}>NOTES</button>}\n      {displayNotes && <button onClick={protraitHandler}>PORTRAIT</button>}\n\n    </div>\n  )\n}\n\nexport default NPC","/Users/scottbillings/Desktop/D&D/client/src/Components/Dice/Dice.js",["208"],"import React, {useState} from 'react'\nimport './Dice.css';\nimport DiceRoll from '../DiceRoll'\nimport DicePic from '../../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png'\n\n\nconst Dice = ({sendPlayerRoll}) => {\n  return (\n    <div className=\"dice-container\">\n      <div className=\"dice-picture-container\">\n        <img src={DicePic} alt=\"\"></img>\n      </div>\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\n\n    </div>\n  )\n}\n\nexport default Dice;","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/Combat.js",["209","210","211"],"import React, {useEffect, useState, useRef} from 'react';\nimport { GiConsoleController } from 'react-icons/gi';\nimport './Combat.css';\nimport MonsterCreator from './MonsterCreator';\nimport {GiPieceSkull} from 'react-icons/gi'\nimport PlayerMovement from './PlayerMovement';\nimport PlayerInitiative from './PlayerInitiative';\n\nconst Combat = ({\n  setUserYPosition, \n  setUserXPosition, \n  userXPosition, \n  userYPosition, \n  sendPlayerPosition, \n  users, \n  partyPosition, \n  name, \n  array, \n  monsterData, \n  sendMonsterInfo, \n  role, \n  stats, \n  clearMonsterInfo, \n  clearPlayerPosition, \n  combatMap, \n  partyData, \n  partyRolls,\n  showNotification\n}) => {\n  \n  const [newMonsterData, setNewMonsterData] = useState(monsterData ? [...monsterData]: null)\n  const [activeMonster, setActiveMonster] = useState()\n  const [hack, setHack] = useState(false)\n  const [playerSize, setPlayerSize] = useState(partyPosition[name] ? partyPosition[name].position.size : \"small\")\n\n  const xValue = useRef(localStorage.getItem('xValue') ? JSON.parse(localStorage.getItem('xValue')) : 50)\n  const yValue = useRef(localStorage.getItem('yValue') ? JSON.parse(localStorage.getItem('yValue')) : 50)\n\nuseEffect(() => {\n  if(monsterData) {\n  setNewMonsterData([...monsterData])}\n  else {\n    setNewMonsterData()\n  }\n},[monsterData])\n\n  // make this use effect conditional for if it is a player\n  \n//   useEffect(() => {\n//     if (role === 'DM') {return}\n//     else if(role === 'PLAYER') {\n//     let theThing = document.querySelector(\"#thing\");\n//     let container = document.querySelector(\"#contentContainer\")\n//     container.addEventListener(\"click\", function(event) {\n//       xValue.current = event.clientX - container.getBoundingClientRect().left - (theThing.clientWidth / 2);\n//       yValue.current = event.clientY - container.getBoundingClientRect().top - (theThing.clientHeight / 2);\n//       window.localStorage.setItem(\"xValue\", JSON.stringify(xValue.current))\n//       window.localStorage.setItem('yValue', JSON.stringify(yValue.current))\n//       // for monster instead of doing this,just make it go straight to the new copy monsterData\n//       setUserXPosition(xValue.current)\n//       setUserYPosition(yValue.current)\n//       }\n    \n//     );\n//     }\n// }, [users])\n// make this use effect conditional for if its a DM\n\n\n\nlet container = document.querySelector(\"#contentContainer\")\nlet thisBullshit = (event) => {\n  let monsterToken = document.querySelector(`#${activeMonster.id}`);\n  let monsterX = event.clientX - container.getBoundingClientRect().left - (monsterToken.clientWidth / 2);\n  let monsterY = event.clientY - container.getBoundingClientRect().top - (monsterToken.clientHeight / 2);\n  let monsterDataCopy = newMonsterData;\n  monsterDataCopy[activeMonster.value - 1] = {...monsterDataCopy[activeMonster.value - 1], xPosition: monsterX}\n  monsterDataCopy[activeMonster.value - 1] = {...monsterDataCopy[activeMonster.value - 1], yPosition: monsterY}\n  console.log(monsterToken)\n  monsterToken.style.left = monsterX + \"px\";\n  monsterToken.style.top = monsterY + \"px\";\n  setNewMonsterData(monsterDataCopy)\n  monsterToken = 0;\n  // container.removeEventListener(\"click\", thisBullshit)\n  return(console.log(\"you clicked\")) }\n  \n  let removeThisCrap = () => {\n    container.removeEventListener(\"click\", thisBullshit)\n  }\n\n\n  useEffect(() => {\n  if (activeMonster) {\n    container.addEventListener(\"click\", thisBullshit)\n  }}, [activeMonster])\n    \n    \n    \n  \n\n// activeMonster, newMonsterData, monsterData\n\n  const endTurn = () => {\n    let position = {x: xValue.current, y: yValue.current, size: playerSize}\n    sendPlayerPosition(position)\n    console.log(partyPosition)\n  }\n\n  const endMonsterTurn = () => {\n    sendMonsterInfo(newMonsterData)\n    showNotification('Monster Movement Sent')\n    console.log(\"end monster turn fired\")\n  }\n\n\n  const wtfIsGoingOn = () => {\n    console.log(stats)\n  }\n\n  \n  \n  \nreturn (\n    <div className=\"combat-outer-border\">\n        {/* <button onClick={wtfIsGoingOn}>CHeck for shit</button> */}\n    <PlayerInitiative   \n      partyData={partyData}\n      partyRolls={partyRolls}\n      users={users}\n      />\n      \n      <div  id=\"contentContainer\">\n        {role && role !== \"DM\" &&<div id=\"thing\" className={partyPosition[name] ? `${partyPosition[name].position.size}` : 'small'}  style={{left: `${xValue.current}px`, top: `${yValue.current}px`}}src=\"//www.kirupa.com/images/smiley_red.png\">\n          <img className=\"my-icon-image\" alt=\"\" src={stats.portrait}></img>\n          </div>}\n       {/* this should contain the image of the player's character, and the players character should not render below with the other characters */}\n\n        {newMonsterData && newMonsterData.map(monster => <button \n          id={monster.id}\n          key={monster.id} \n          className={`monster-token-container ${monster.size}`}\n          style={{left: `${monster.xPosition}px`, top: `${monster.yPosition}px`}}\n          // onClick={() => {if (activeMonster === monster) {setActiveMonster(null)} else {setActiveMonster(monster)}}}\n          >\n          {monster.dead === true ? <GiPieceSkull className=\"dead-token\"/> : <img alt=\"\" src={monster.icon}></img>}\n          {/* {monster.dead === false && <img alt=\"\" src={monster.icon}></img>} */}\n\n          </button>)}\n\n\n          {/* {Object.keys(partyPosition).map((user, index) */}\n\n          {Object.keys(partyPosition).filter(player => player !== name).map((user, index) =>  <div \n          className={`${partyPosition[user].position.size} circle`}\n          key={user} \n          id={user}  \n          style={{left: `${partyPosition[user].position.x}px`, \n                  top: `${partyPosition[user].position.y}px`, \n                  position: \"absolute\", \n                  zIndex: `${array[index]}`,\n                  borderRadius: \"50%\" ,\n                  // height: \"28px\",\n                  // width: \"28px\", \n                  transition: \"left 0.5s ease-in, top 0.5s ease-in\"}} \n           \n          >\n            {partyData[user] && <img \n          alt=\"\" \n          src={partyData[user].text.portrait}\n          className=\"youSuck\"\n          >\n          </img>}\n          </div> )}\n          \n\n          \n\n          \n        {combatMap && <img \n          className=\"combat-image\" \n          alt=\"\" \n          src={combatMap}\n          >\n          </img>}\n            \n      </div>\n\n      {role === \"DM\" ? <MonsterCreator \n        endTurn={endTurn} \n        hack={hack} \n        setHack={setHack} \n        sendMonsterInfo={sendMonsterInfo} \n        monsterData={monsterData} \n        setActiveMonster={setActiveMonster} \n        removeThisCrap={removeThisCrap} \n        newMonsterData={newMonsterData} \n        setNewMonsterData={setNewMonsterData}\n        endMonsterTurn={endMonsterTurn}\n        clearMonsterInfo={clearMonsterInfo}\n        clearPlayerPosition={clearPlayerPosition}\n        activeMonster={activeMonster}\n        showNotification={showNotification}\n        /> :\n        \n        <PlayerMovement endTurn={endTurn} stats={stats} partyPosition={partyPosition} setPlayerSize={setPlayerSize} playerSize={playerSize}/>\n        \n        }\n\n\n\n    </div>\n  )\n}\n\nexport default Combat\n\n","/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/ErrorModal.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Modal.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/Help.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/CustomDropdown.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MessageDropDown.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/MonsterCreator.js",["212","213","214"],"import React, {useState, useEffect, useRef} from 'react'\nimport './MonsterCreator.css';\nimport CustomDropDown from '../Reusable/CustomDropdown';\nimport MonsterDropDown from '../Reusable/MonsterDropDown';\nimport { CgCloseR }  from 'react-icons/cg'\nimport {GiPieceSkull} from 'react-icons/gi'\nimport MonsterListItem from './MonsterListItem';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd'\n\n\nconst MonsterCreator  = ({monsterData, sendMonsterInfo, setActiveMonster, setQuery, removeThisCrap, newMonsterData, setNewMonsterData, hack, setHack, endTurn, endMonsterTurn, clearMonsterInfo, clearPlayerPosition, activeMonster, showNotification}) => {\n\n  const monsterNumberArr = [\n    {id:\"monster1\", value:1, dead:false, xPosition:20, yPosition:20, icon: \"\", size: \"small\"}, {id:\"monster2\", value:2, dead:false, xPosition:20, yPosition:60, icon: \"\", size: \"small\"}, \n    {id:\"monster3\", value:3, dead:false, xPosition:20, yPosition:100, icon: \"\", size: \"small\"}, {id:\"monster4\", value:4, dead:false, xPosition:20, yPosition:140, icon: \"\", size: \"small\"}, \n    {id:\"monster5\", value:5, dead:false, xPosition:20, yPosition:180, icon: \"\", size: \"small\"}, {id:\"monster6\", value:6, dead:false, xPosition:20, yPosition:220, icon: \"\", size: \"small\"}, \n    {id:\"monster7\", value:7, dead:false, xPosition:20, yPosition:260, icon: \"\", size: \"small\"}, {id:\"monster8\", value:8, dead:false, xPosition:20, yPosition:300, icon: \"\", size: \"small\"}, \n    {id:\"monster9\", value:9, dead:false, xPosition:20, yPosition:340, icon: \"\", size: \"small\"}, {id:\"monster10\", value:10, dead:false, xPosition:20, yPosition:380, icon: \"\", size: \"small\"},\n    {id:\"monster11\", value:11, dead:false, xPosition:20, yPosition:420, icon: \"\", size: \"small\"},{id:\"monster12\", value:12, dead:false, xPosition:20, yPosition:460, icon: \"\", size: \"small\"},\n    {id:\"monster13\", value:13, dead:false, xPosition:20, yPosition:500, icon: \"\", size: \"small\"},{id:\"monster14\", value:14, dead:false, xPosition:20, yPosition:540, icon: \"\", size: \"small\"},\n    {id:\"monster15\", value:15, dead:false, xPosition:20, yPosition:580, icon: \"\", size: \"small\"},\n  ]\n  const [monsterNum, setMonsterNum] = useState([{id:0, value:0}]);\n  const [monsterGroup, setMonsterGroup] = useState()\n  const [monsterOrder, setMonsterOrder] = useState(newMonsterData ? [...newMonsterData] : null)\n\n  \n\n  const monsterStatusHandler = (activeMonster) => {\n    console.log(activeMonster)\n  if (newMonsterData){\n    if (activeMonster.dead === false) {\n  let monsterDataCopy = newMonsterData;\n  monsterDataCopy[activeMonster.value - 1] = {...monsterDataCopy[activeMonster.value - 1], dead: true}\n  console.log(\"going from not dead to dead\")\n  setNewMonsterData([...monsterDataCopy])\n  console.log(newMonsterData)\n\n} \n\n  if (activeMonster.dead === true) {\n  let monsterDataCopy = newMonsterData;\n  monsterDataCopy[activeMonster.value - 1] = {...monsterDataCopy[activeMonster.value - 1], dead: false}\n  console.log(\"going from dead to not dead\")\n  console.log(monsterDataCopy);\n  setNewMonsterData([...monsterDataCopy])\n  \n}\n  }\n  }\n\n  const checker = () => {\n    console.log(monsterNum, monsterGroup)\n    sendMonsterInfo(monsterGroup)\n    setMonsterOrder([...monsterGroup])\n  }\n\n  const handleOnDragEnd = (result) => {\n    if (!result.destination) return;\n    const items = Array.from(monsterOrder);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setMonsterOrder(items)\n  }\n\n  return (\n    <div className=\"monster-creator-container\">\n      <CustomDropDown title=\"NUMBER OF UNITS\" items={monsterNumberArr} singleState={monsterNum} setSingleState={setMonsterNum} setSecondState={setMonsterGroup}  />\n      {monsterNum[0].id !== 0 &&  <MonsterDropDown title=\"MONSTER ICONS\" items={monsterGroup} setMonsterGroup={setMonsterGroup} monsterGroup={monsterGroup} />}\n       <button onClick={checker} className=\"minions-button\">CREATE MY MINIONS!</button>\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n      <Droppable droppableId=\"monsters\">\n        {(provided) => (\n      <div className=\"monster-list-container\" {...provided.droppableProps} ref = {provided.innerRef}>\n        {monsterOrder && monsterOrder.map((monster, index) => (\n          <Draggable key={monster.id} draggableId={monster.id} index={index}>\n          {(provided) => (\n            <div className=\"monster-list-item-container\" draggable=\"true\" {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}  >\n             \n            <div className=\"monster-item-image\">\n              {monster.dead === true && <GiPieceSkull className=\"dead-icon\" />}\n              {monster.dead === false && <img src={monster.icon} alt=\"\" />}\n            </div>\n            <div className={activeMonster && activeMonster.id === monster.id ? \"select-monster-container activeSelect\" : \"select-monster-container\"}>\n              <button onClick={() => {\n            removeThisCrap();\n            setActiveMonster(monster);\n            // does remove this crap need to be actually called here? does the onclick need an anonymous function?\n            \n            }}>\n                SELECT\n              </button>\n              </div>\n            <div className=\"monster-item-delete\" onClick={() => {\n              monsterStatusHandler(monster)\n              showNotification(\"Monster Status Changed\")\n              setHack(hack)\n\n            }}>\n              <CgCloseR className=\"monster-delete-icon\"/>\n            </div>\n          </div>\n          )}\n          </Draggable>\n          ))}\n        {provided.placeholder}\n      </div>\n        )}\n      </Droppable>\n      </DragDropContext>\n        {newMonsterData && <button onClick={endMonsterTurn} className=\"minions-button\">CONFIRM MOVEMENT</button>}\n        {newMonsterData && <button className=\"minions-button\" onClick={() => {setMonsterOrder(null)\n          clearMonsterInfo() }}>CLEAR MONSTERS</button>}\n\n        <button className='minions-button' onClick={clearPlayerPosition}>CLEAR PLAYERS</button>\n    </div>\n  )\n}\n\nexport default MonsterCreator;","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterDropDown.js",["215","216","217"],"/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/MonsterInputs.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/MonsterListItem.js",["218"],"import React, {useState, useEffect} from 'react'\nimport './MonsterCreator.css';\nimport {GiPieceSkull} from 'react-icons/gi'\nimport { CgCloseR }  from 'react-icons/cg'\n\nconst MonsterListItem = ({monster, removeThisCrap, setActiveMonster, newMonsterData, setNewMonsterData, monsterStatusHandler, hack, setHack}) => {\n  const [dead, setDead] = useState(false)\n\n  return (\n    \n      <div className=\"monster-list-item-container\" draggable=\"true\" >\n        <div className=\"monster-item-image\">\n          {monster.dead === true && <GiPieceSkull className=\"dead-icon\" />}\n          {monster.dead === false && <img src={monster.icon} alt=\"\" />}\n        </div>\n        <div className=\"select-monster-container\">\n          <button onClick={() => {\n        removeThisCrap();\n        setActiveMonster(monster);\n        // does remove this crap need to be actually called here? does the onclick need an anonymous function?\n        \n        }}>\n            SELECT\n          </button>\n          </div>\n        <div className=\"monster-item-delete\" onClick={() => {\n          monsterStatusHandler(monster)\n          setHack(hack)\n          setDead(!dead)\n        }}>\n          <CgCloseR className=\"monster-delete-icon\"/>\n        </div>\n\n\n\n      </div>\n    \n\n  )\n}\n\nexport default MonsterListItem;","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerMovement.js",["219","220"],"import React, {useState, useEffect} from 'react'\nimport './MonsterCreator.css';\nimport PlayerListItem from './PlayerListItem';\nimport DiceRoll from '../DiceRoll';\n\n\n\nconst PlayerMovement = ({endTurn, stats, partyPosition, setPlayerSize, playerSize, partyData, name, sendPlayerRoll}) => {\n  return (\n    <div className=\"monster-creator-container\">\n      \n      <div className=\"monster-list-container\">\n       <PlayerListItem stats={stats} setPlayerSize={setPlayerSize} playerSize={playerSize} partyData={partyData} name={name}/>\n        <button onClick={endTurn} className=\"minions-button\">CONFIRM MOVEMENT</button>\n        {/* <button onClick={() => {console.log(partyPosition)}} className=\"minions-button\">Party Position</button> */}\n      </div>\n      <div className=\"black-background\">\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\n\n      </div>\n    </div>\n  )\n}\n\nexport default PlayerMovement;","/Users/scottbillings/Desktop/D&D/client/src/Components/Reusable/FrontDropDown.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerListItem.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/Exit.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Navigation/DiceDrawer.js",[],"/Users/scottbillings/Desktop/D&D/client/src/Components/Modal/NotificationModal.js",["221"],"/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerCombat.js",["222","223","224","225"],"import React, {useEffect, useState, useRef} from 'react';\nimport { GiConsoleController } from 'react-icons/gi';\nimport './Combat.css';\nimport MonsterCreator from './MonsterCreator';\nimport {GiPieceSkull} from 'react-icons/gi'\nimport PlayerMovement from './PlayerMovement';\nimport PlayerInitiative from './PlayerInitiative';\n\nconst Combat = ({setUserYPosition, setUserXPosition, userXPosition, userYPosition, sendPlayerPosition, users, partyPosition, name, array, monsterData, sendMonsterInfo, role, stats, clearMonsterInfo, clearPlayerPosition, combatMap, partyData, partyRolls, partyStats, sendPlayerRoll}) => {\n  \n  const [newMonsterData, setNewMonsterData] = useState(monsterData ? [...monsterData]: null)\n  const [activeMonster, setActiveMonster] = useState()\n  const [hack, setHack] = useState(false)\n  const [playerSize, setPlayerSize] = useState(partyPosition[name] ? partyPosition[name].position.size : \"small\")\n\n  const xValue = useRef(localStorage.getItem('xValue') ? JSON.parse(localStorage.getItem('xValue')) : 50)\n  const yValue = useRef(localStorage.getItem('yValue') ? JSON.parse(localStorage.getItem('yValue')) : 50)\n\nuseEffect(() => {\n  if(monsterData) {\n  setNewMonsterData([...monsterData])}\n  else {\n    setNewMonsterData()\n  }\n},[monsterData])\n\n  // make this use effect conditional for if it is a player\n  \n  useEffect(() => {\n    if (role === 'DM') {return}\n    else if(role === 'PLAYER') {\n    let theThing = document.querySelector(\"#thing\");\n    let container = document.querySelector(\"#contentContainer\")\n    container.addEventListener(\"click\", function(event) {\n      xValue.current = event.clientX - container.getBoundingClientRect().left - (theThing.clientWidth / 2);\n      yValue.current = event.clientY - container.getBoundingClientRect().top - (theThing.clientHeight / 2);\n      window.localStorage.setItem(\"xValue\", JSON.stringify(xValue.current))\n      window.localStorage.setItem('yValue', JSON.stringify(yValue.current))\n      // for monster instead of doing this,just make it go straight to the new copy monsterData\n      setUserXPosition(xValue.current)\n      setUserYPosition(yValue.current)\n      }\n    \n    );\n    }\n}, [users])\n// make this use effect conditional for if its a DM\n\n\n\nlet container = document.querySelector(\"#contentContainer\")\nlet thisBullshit = (event) => {\n  let monsterToken = document.querySelector(`#${activeMonster.id}`);\n  let monsterX = event.clientX - container.getBoundingClientRect().left - (monsterToken.clientWidth / 2);\n  let monsterY = event.clientY - container.getBoundingClientRect().top - (monsterToken.clientHeight / 2);\n  let monsterDataCopy = newMonsterData;\n  monsterDataCopy[activeMonster.value - 1] = {...monsterDataCopy[activeMonster.value - 1], xPosition: monsterX}\n  monsterDataCopy[activeMonster.value - 1] = {...monsterDataCopy[activeMonster.value - 1], yPosition: monsterY}\n  console.log(monsterToken)\n  monsterToken.style.left = monsterX + \"px\";\n  monsterToken.style.top = monsterY + \"px\";\n  setNewMonsterData(monsterDataCopy)\n  monsterToken = 0;\n  // container.removeEventListener(\"click\", thisBullshit)\n  return(console.log(\"you clicked\")) }\n  \n  let removeThisCrap = () => {\n    container.removeEventListener(\"click\", thisBullshit)\n  }\n\n\n  useEffect(() => {\n  if (activeMonster) {\n    container.addEventListener(\"click\", thisBullshit)\n  }}, [activeMonster])\n    \n    \n    \n  \n\n// activeMonster, newMonsterData, monsterData\n\n  const endTurn = () => {\n    let position = {x: xValue.current, y: yValue.current, size: playerSize}\n    sendPlayerPosition(position)\n    console.log(partyPosition)\n  }\n\n  const endMonsterTurn = () => {\n    sendMonsterInfo(newMonsterData)\n    console.log(\"end monster turn fired\")\n  }\n\n\n  const wtfIsGoingOn = () => {\n    console.log(stats)\n  }\n\n  \n  \n  \nreturn (\n    <div className=\"combat-outer-border\">\n        {/* <button onClick={wtfIsGoingOn}>CHeck for shit</button> */}\n        <PlayerInitiative   \n      partyData={partyData}\n      partyRolls={partyRolls}\n      users={users}\n      />\n    \n      \n      <div  id=\"contentContainer\">\n        {role && role !== \"DM\" &&<div id=\"thing\" className={partyPosition[name] ? `${partyPosition[name].position.size}` : 'small'}  style={{left: `${xValue.current}px`, top: `${yValue.current}px`}}src=\"//www.kirupa.com/images/smiley_red.png\">\n          {partyData[name] && <img className=\"my-icon-image\" alt=\"\" src={partyData[name].text.portrait}></img>}\n          </div>}\n       {/* this should contain the image of the player's character, and the players character should not render below with the other characters */}\n\n        {newMonsterData && newMonsterData.map(monster => <button \n          id={monster.id}\n          key={monster.id} \n          className={`monster-token-container ${monster.size}`}\n          style={{left: `${monster.xPosition}px`, top: `${monster.yPosition}px`}}\n          // onClick={() => {if (activeMonster === monster) {setActiveMonster(null)} else {setActiveMonster(monster)}}}\n          >\n          {monster.dead === true ? <GiPieceSkull className=\"dead-token\"/> : <img alt=\"\" src={monster.icon}></img>}\n          {/* {monster.dead === false && <img alt=\"\" src={monster.icon}></img>} */}\n\n          </button>)}\n\n\n          {/* {Object.keys(partyPosition).map((user, index) */}\n\n          {Object.keys(partyPosition).filter(player => player !== name).map((user, index) =>  <div \n          className={`${partyPosition[user].position.size} circle`}\n          key={user} \n          id={user}  \n          style={{left: `${partyPosition[user].position.x}px`, \n                  top: `${partyPosition[user].position.y}px`, \n                  position: \"absolute\", \n                  zIndex: `${array[index]}`,\n                  borderRadius: \"50%\" ,\n                  // height: \"28px\",\n                  // width: \"28px\", \n                  transition: \"left 0.5s ease-in, top 0.5s ease-in\"}} \n           \n          >\n            {partyData[user] && <img \n          alt=\"\" \n          src={partyData[user].text.portrait}\n          className=\"youSuck\"\n          >\n          </img>}\n          </div> )}\n          \n\n          \n\n          \n        {combatMap && <img \n          className=\"combat-image\" \n          alt=\"\" \n          src={combatMap}\n          >\n          </img>}\n            \n      </div>\n\n      {role === \"DM\" ? <MonsterCreator \n        endTurn={endTurn} \n        hack={hack} \n        setHack={setHack} \n        sendMonsterInfo={sendMonsterInfo} \n        monsterData={monsterData} \n        setActiveMonster={setActiveMonster} \n        removeThisCrap={removeThisCrap} \n        newMonsterData={newMonsterData} \n        setNewMonsterData={setNewMonsterData}\n        endMonsterTurn={endMonsterTurn}\n        clearMonsterInfo={clearMonsterInfo}\n        clearPlayerPosition={clearPlayerPosition}\n        activeMonster={activeMonster}\n        /> :\n        \n        <PlayerMovement endTurn={endTurn} stats={stats} partyPosition={partyPosition} setPlayerSize={setPlayerSize} playerSize={playerSize} partyData={partyData} name={name} sendPlayerRoll={sendPlayerRoll}/>\n        \n        }\n\n\n\n    </div>\n  )\n}\n\nexport default Combat\n\n","/Users/scottbillings/Desktop/D&D/client/src/Components/Combat/PlayerInitiative.js",[],{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":26,"column":9,"nodeType":"232","messageId":"233","endLine":26,"endColumn":18},{"ruleId":"230","severity":1,"message":"235","line":11,"column":15,"nodeType":"232","messageId":"233","endLine":11,"endColumn":21},{"ruleId":"230","severity":1,"message":"236","line":25,"column":11,"nodeType":"232","messageId":"233","endLine":25,"endColumn":15},{"ruleId":"237","severity":1,"message":"238","line":100,"column":6,"nodeType":"239","endLine":100,"endColumn":33,"suggestions":"240"},{"ruleId":"237","severity":1,"message":"241","line":151,"column":8,"nodeType":"239","endLine":151,"endColumn":13,"suggestions":"242"},{"ruleId":"237","severity":1,"message":"243","line":164,"column":8,"nodeType":"239","endLine":164,"endColumn":28,"suggestions":"244"},{"ruleId":"237","severity":1,"message":"245","line":179,"column":6,"nodeType":"239","endLine":179,"endColumn":16,"suggestions":"246"},{"ruleId":"237","severity":1,"message":"247","line":210,"column":4,"nodeType":"239","endLine":210,"endColumn":36,"suggestions":"248"},{"ruleId":"230","severity":1,"message":"249","line":466,"column":9,"nodeType":"232","messageId":"233","endLine":466,"endColumn":20},{"ruleId":"230","severity":1,"message":"250","line":2,"column":8,"nodeType":"232","messageId":"233","endLine":2,"endColumn":12},{"ruleId":"230","severity":1,"message":"251","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"252","line":8,"column":10,"nodeType":"232","messageId":"233","endLine":8,"endColumn":27},{"ruleId":"230","severity":1,"message":"253","line":8,"column":29,"nodeType":"232","messageId":"233","endLine":8,"endColumn":49},{"ruleId":"237","severity":1,"message":"254","line":11,"column":3,"nodeType":"232","endLine":11,"endColumn":12,"suggestions":"255"},{"ruleId":"230","severity":1,"message":"235","line":4,"column":15,"nodeType":"232","messageId":"233","endLine":4,"endColumn":21},{"ruleId":"237","severity":1,"message":"256","line":27,"column":5,"nodeType":"239","endLine":27,"endColumn":22,"suggestions":"257"},{"ruleId":"230","severity":1,"message":"258","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":24},{"ruleId":"230","severity":1,"message":"259","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":23},{"ruleId":"237","severity":1,"message":"260","line":22,"column":6,"nodeType":"239","endLine":22,"endColumn":8,"suggestions":"261"},{"ruleId":"230","severity":1,"message":"262","line":17,"column":9,"nodeType":"232","messageId":"233","endLine":17,"endColumn":21},{"ruleId":"230","severity":1,"message":"258","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":24},{"ruleId":"230","severity":1,"message":"263","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":35},{"ruleId":"230","severity":1,"message":"264","line":43,"column":9,"nodeType":"232","messageId":"233","endLine":43,"endColumn":19},{"ruleId":"237","severity":1,"message":"265","line":14,"column":5,"nodeType":"239","endLine":14,"endColumn":15,"suggestions":"266"},{"ruleId":"230","severity":1,"message":"258","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":24},{"ruleId":"230","severity":1,"message":"267","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":29},{"ruleId":"237","severity":1,"message":"268","line":95,"column":7,"nodeType":"239","endLine":95,"endColumn":22,"suggestions":"269"},{"ruleId":"230","severity":1,"message":"270","line":116,"column":9,"nodeType":"232","messageId":"233","endLine":116,"endColumn":21},{"ruleId":"230","severity":1,"message":"263","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":35},{"ruleId":"230","severity":1,"message":"271","line":1,"column":37,"nodeType":"232","messageId":"233","endLine":1,"endColumn":43},{"ruleId":"230","severity":1,"message":"272","line":7,"column":8,"nodeType":"232","messageId":"233","endLine":7,"endColumn":23},{"ruleId":"230","severity":1,"message":"273","line":9,"column":21,"nodeType":"232","messageId":"233","endLine":9,"endColumn":33},{"ruleId":"230","severity":1,"message":"274","line":13,"column":12,"nodeType":"232","messageId":"233","endLine":13,"endColumn":25},{"ruleId":"230","severity":1,"message":"275","line":35,"column":12,"nodeType":"232","messageId":"233","endLine":35,"endColumn":29},{"ruleId":"230","severity":1,"message":"263","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":35},{"ruleId":"230","severity":1,"message":"258","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":24},{"ruleId":"230","severity":1,"message":"263","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":35},{"ruleId":"230","severity":1,"message":"276","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"267","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":29},{"ruleId":"237","severity":1,"message":"277","line":46,"column":4,"nodeType":"239","endLine":46,"endColumn":11,"suggestions":"278"},{"ruleId":"237","severity":1,"message":"268","line":75,"column":7,"nodeType":"239","endLine":75,"endColumn":22,"suggestions":"279"},{"ruleId":"230","severity":1,"message":"270","line":95,"column":9,"nodeType":"232","messageId":"233","endLine":95,"endColumn":21},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],"no-unused-vars","'ErrorModal' is defined but never used.","Identifier","unusedVar","'showState' is assigned a value but never used.","'Howler' is defined but never used.","'room' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recipients' and 'stats'. Either include them or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.","ArrayExpression",["282"],"React Hook useEffect has a missing dependency: 'unseenMap'. Either include it or remove the dependency array. You can also do a functional update 'setUnseenMap(u => ...)' if you only need 'unseenMap' in the 'setUnseenMap' call.",["283"],"React Hook useEffect has a missing dependency: 'unseenNPC'. Either include it or remove the dependency array. You can also do a functional update 'setUnseenNPC(u => ...)' if you only need 'unseenNPC' in the 'setUnseenNPC' call.",["284"],"React Hook useEffect has a missing dependency: 'npcNotes'. Either include it or remove the dependency array.",["285"],"React Hook useEffect has a missing dependency: 'audioClips'. Either include it or remove the dependency array.",["286"],"'displayTest' is assigned a value but never used.","'Dice' is defined but never used.","'DiceRoll' is defined but never used.","'playerIconPreview' is assigned a value but never used.","'setPlayerIconPreview' is assigned a value but never used.","React Hook useEffect contains a call to 'setCorrectName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [newName] as a second argument to the useEffect Hook.",["287"],"React Hook useEffect has a missing dependency: 'newName'. Either include it or remove the dependency array.",["288"],"'useState' is defined but never used.","'MessageDropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'setUnreadMessages'. Either include it or remove the dependency array. If 'setUnreadMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["289"],"'showDropDown' is assigned a value but never used.","'useEffect' is defined but never used.","'checkState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'item.name' and 'localNotes'. Either include them or remove the dependency array. If 'setLocalNotes' needs the current value of 'item.name', you can also switch to useReducer instead of useState and read 'item.name' in the reducer.",["290"],"'GiConsoleController' is defined but never used.","React Hook useEffect has missing dependencies: 'container' and 'thisBullshit'. Either include them or remove the dependency array.",["291"],"'wtfIsGoingOn' is assigned a value but never used.","'useRef' is defined but never used.","'MonsterListItem' is defined but never used.","'setSelection' is assigned a value but never used.","'handleOnClick' is defined but never used.","'isItemInSelection' is defined but never used.","'Backdrop' is defined but never used.","React Hook useEffect has missing dependencies: 'role', 'setUserXPosition', and 'setUserYPosition'. Either include them or remove the dependency array. If 'setUserXPosition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["292"],["293"],"no-global-assign","no-unsafe-negation",{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"312","fix":"316"},"Update the dependencies array to be: [ENDPOINT, location.search, recipients, stats]",{"range":"317","text":"318"},"Update the dependencies array to be: [map, unseenMap]",{"range":"319","text":"320"},"Update the dependencies array to be: [npcArray, npcNotes, unseenNPC]",{"range":"321","text":"322"},"Update the dependencies array to be: [npcArray, npcNotes]",{"range":"323","text":"324"},"Update the dependencies array to be: [messages, unreadMessages, name, audioClips]",{"range":"325","text":"326"},"Add dependencies array: [newName]",{"range":"327","text":"328"},"Update the dependencies array to be: [partyData, name, newName]",{"range":"329","text":"330"},"Update the dependencies array to be: [setUnreadMessages]",{"range":"331","text":"332"},"Update the dependencies array to be: [item.name, localNotes, npcNotes]",{"range":"333","text":"334"},"Update the dependencies array to be: [activeMonster, container, thisBullshit]",{"range":"335","text":"336"},"Update the dependencies array to be: [role, setUserXPosition, setUserYPosition, users]",{"range":"337","text":"338"},{"range":"339","text":"336"},[4224,4251],"[ENDPOINT, location.search, recipients, stats]",[5322,5327],"[map, unseenMap]",[5615,5635],"[npcArray, npcNotes, unseenNPC]",[6035,6045],"[npcArray, npcNotes]",[6796,6828],"[messages, unreadMessages, name, audioClips]",[483,483],", [newName]",[771,788],"[partyData, name, newName]",[602,604],"[setUnreadMessages]",[478,488],"[item.name, localNotes, npcNotes]",[3430,3445],"[activeMonster, container, thisBullshit]",[2160,2167],"[role, setUserXPosition, setUserYPosition, users]",[3332,3347]]